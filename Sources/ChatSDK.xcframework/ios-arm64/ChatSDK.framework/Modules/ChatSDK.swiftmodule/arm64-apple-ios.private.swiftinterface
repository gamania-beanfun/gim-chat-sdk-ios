// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name ChatSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import CoreGraphics
import CoreTelephony
import CryptoKit
import DeviceCheck
import Dispatch
import Foundation
import Network
import OSLog
import SQLite3
import Swift
import SystemConfiguration
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_inheritsConvenienceInitializers final public class ParticipantListQueryParams : ObjectiveC.NSObject {
  final public var limit: Swift.UInt
  @objc override dynamic public init()
  convenience public init(builder: (ChatSDK.ParticipantListQueryParams) -> Swift.Void)
  @objc deinit
}
extension ChatSDK.ParticipantListQueryParams {
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
}
extension ChatSDK.ParticipantListQueryParams : Foundation.NSCopying {
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
public typealias UserHandler = ((_ user: ChatSDK.User?, _ error: ChatSDK.GIMError?) -> Swift.Void)
public protocol RestrictedUserListQuery : AnyObject {
  var hasNext: Swift.Bool { get }
  var isLoading: Swift.Bool { get }
  func loadNextPage(completionHandler: @escaping ChatSDK.RestrictedUserListHandler)
}
#warning("TODO, Most implementations are temporary, need to be refactored")
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BaseChannel : ObjectiveC.NSObject, Swift.Identifiable, ChatSDK.Serializable, ChatSDK.Mappable {
  open var id: Swift.String
  open var channelURL: Swift.String
  open var name: Swift.String
  open var coverURL: Swift.String?
  open var creator: ChatSDK.User? {
    get
  }
  open var createdAt: Swift.Int64
  open var data: Swift.String?
  open var customType: Swift.String?
  open var isFrozen: Swift.Bool
  open var channelType: ChatSDK.ChannelType
  @ChatSDK.SafeQueue open var pinnedMessageIds: [Swift.Int64] {
    get
    set
    _modify
  }
  open var lastPinMessage: ChatSDK.BaseMessage?
  public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic public init()
  required public init(from decoder: any Swift.Decoder) throws
  public typealias ID = Swift.String
  public func isOperator(user: ChatSDK.User) -> Swift.Bool
  public func isOperator(userId: Swift.String) -> Swift.Bool
  @objc deinit
}
extension ChatSDK.BaseChannel {
  dynamic public func report(offendingUser: ChatSDK.User, reportCategory: ChatSDK.ReportCategory, reportDescription: Swift.String?, completionHandler: ChatSDK.GIMErrorHandler?)
  @available(iOS 13.0, *)
  dynamic public func report(offendingUser: ChatSDK.User, reportCategory: ChatSDK.ReportCategory, reportDescription: Swift.String?) async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
  dynamic public func report(category: ChatSDK.ReportCategory, reportDescription: Swift.String?, completionHandler: ChatSDK.GIMErrorHandler?)
  @available(iOS 13.0, *)
  dynamic public func report(category: ChatSDK.ReportCategory, reportDescription: Swift.String?) async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
  dynamic public func report(message: ChatSDK.BaseMessage, reportCategory: ChatSDK.ReportCategory, reportDescription: Swift.String?, completionHandler: ChatSDK.GIMErrorHandler?)
  @available(iOS 13.0, *)
  dynamic public func report(message: ChatSDK.BaseMessage, reportCategory: ChatSDK.ReportCategory, reportDescription: Swift.String?) async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
}
extension ChatSDK.BaseChannel {
  dynamic public func delete(completionHandler: ChatSDK.GIMErrorHandler?)
  @available(iOS 13.0, *)
  dynamic public func delete() async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
}
extension ChatSDK.BaseChannel {
  dynamic public func addOperators(userIds: [Swift.String], completionHandler: ChatSDK.GIMErrorHandler?)
  @available(iOS 13.0, *)
  dynamic public func addOperators(userIds: [Swift.String]) async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
  dynamic public func removeOperators(userIds: [Swift.String], completionHandler: ChatSDK.GIMErrorHandler?)
  @available(iOS 13.0, *)
  dynamic public func removeOperators(userIds: [Swift.String]) async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
  dynamic public func removeAllOperators(completionHandler: ChatSDK.GIMErrorHandler?)
  @available(iOS 13.0, *)
  dynamic public func removeAllOperators() async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
  dynamic public func createOperatorListQuery() -> ChatSDK.OperatorListQuery?
  dynamic public func createOperatorListQuery(paramsBuilder: (ChatSDK.OperatorListQueryParams) -> Swift.Void) -> ChatSDK.OperatorListQuery?
  dynamic public func createOperatorListQuery(params: ChatSDK.OperatorListQueryParams) -> ChatSDK.OperatorListQuery?
  dynamic public class func createOperatorListQuery(channelType: ChatSDK.ChannelType, channelURL: Swift.String) -> ChatSDK.OperatorListQuery
  dynamic public class func createOperatorListQuery(channelType: ChatSDK.ChannelType, channelURL: Swift.String, paramsBuilder: (ChatSDK.OperatorListQueryParams) -> Swift.Void) -> ChatSDK.OperatorListQuery
  dynamic public class func createOperatorListQuery(channelType: ChatSDK.ChannelType, channelURL: Swift.String, params: ChatSDK.OperatorListQueryParams) -> ChatSDK.OperatorListQuery
}
extension ChatSDK.BaseChannel {
  public static func == (lhs: ChatSDK.BaseChannel, rhs: ChatSDK.BaseChannel) -> Swift.Bool
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
}
extension ChatSDK.BaseChannel {
  dynamic public func createBannedUserListQuery() -> ChatSDK.BannedUserListQuery?
  dynamic public func createBannedUserListQuery(paramsBuilder: (ChatSDK.BannedUserListQueryParams) -> Swift.Void) -> ChatSDK.BannedUserListQuery?
  dynamic public func createBannedUserListQuery(params: ChatSDK.BannedUserListQueryParams) -> ChatSDK.BannedUserListQuery?
  dynamic public class func createBannedUserListQuery(channelType: ChatSDK.ChannelType, channelURL: Swift.String) -> ChatSDK.BannedUserListQuery
  dynamic public class func createBannedUserListQuery(channelType: ChatSDK.ChannelType, channelURL: Swift.String, paramsBuilder: (ChatSDK.BannedUserListQueryParams) -> Swift.Void) -> ChatSDK.BannedUserListQuery
  dynamic public class func createBannedUserListQuery(channelType: ChatSDK.ChannelType, channelURL: Swift.String, params: ChatSDK.BannedUserListQueryParams) -> ChatSDK.BannedUserListQuery
}
extension ChatSDK.BaseChannel {
  dynamic public func createPreviousMessageListQuery() -> ChatSDK.PreviousMessageListQuery?
  dynamic public func createPreviousMessageListQuery(paramsBuilder: (ChatSDK.PreviousMessageListQueryParams) -> Swift.Void) -> ChatSDK.PreviousMessageListQuery?
  dynamic public func createPreviousMessageListQuery(params: ChatSDK.PreviousMessageListQueryParams) -> ChatSDK.PreviousMessageListQuery?
  dynamic public class func createPreviousMessageListQuery(channelType: ChatSDK.ChannelType, channelURL: Swift.String) -> ChatSDK.PreviousMessageListQuery
  dynamic public class func createPreviousMessageListQuery(channelType: ChatSDK.ChannelType, channelURL: Swift.String, paramsBuilder: (ChatSDK.PreviousMessageListQueryParams) -> Swift.Void) -> ChatSDK.PreviousMessageListQuery
  dynamic public class func createPreviousMessageListQuery(channelType: ChatSDK.ChannelType, channelURL: Swift.String, params: ChatSDK.PreviousMessageListQueryParams) -> ChatSDK.PreviousMessageListQuery
}
extension ChatSDK.BaseChannel {
  dynamic public func banUser(_ user: ChatSDK.User, seconds: Swift.Int, description: Swift.String?, completionHandler: ChatSDK.GIMErrorHandler?)
  @available(iOS 13.0, *)
  dynamic public func banUser(_ user: ChatSDK.User, seconds: Swift.Int, description: Swift.String?) async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
  dynamic public func banUser(userId: Swift.String, seconds: Swift.Int, description: Swift.String?, completionHandler: ChatSDK.GIMErrorHandler?)
  @available(iOS 13.0, *)
  dynamic public func banUser(userId: Swift.String, seconds: Swift.Int, description: Swift.String?) async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
  dynamic public func unbanUser(_ user: ChatSDK.User, completionHandler: ChatSDK.GIMErrorHandler?)
  @available(iOS 13.0, *)
  dynamic public func unbanUser(_ user: ChatSDK.User) async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
  dynamic public func unbanUser(userId: Swift.String, completionHandler: ChatSDK.GIMErrorHandler?)
  @available(iOS 13.0, *)
  dynamic public func unbanUser(userId: Swift.String) async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
}
extension ChatSDK.BaseChannel {
  public func getMyMutedInfo(completionHandler: ChatSDK.MuteInfoHandler?)
  @available(iOS 13.0, *)
  public func getMyMutedInfo() async throws -> Swift.Result<ChatSDK.MuteInfo, ChatSDK.GIMError>
  dynamic public func muteUser(_ user: ChatSDK.User, seconds: Swift.Int, description: Swift.String?, completionHandler: ChatSDK.GIMErrorHandler?)
  @available(iOS 13.0, *)
  dynamic public func muteUser(_ user: ChatSDK.User, seconds: Swift.Int, description: Swift.String?) async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
  dynamic public func muteUser(userId: Swift.String, seconds: Swift.Int, description: Swift.String?, completionHandler: ChatSDK.GIMErrorHandler?)
  @available(iOS 13.0, *)
  dynamic public func muteUser(userId: Swift.String, seconds: Swift.Int, description: Swift.String?) async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
  dynamic public func unmuteUser(userId: Swift.String, completionHandler: ChatSDK.GIMErrorHandler?)
  @available(iOS 13.0, *)
  dynamic public func unmuteUser(userId: Swift.String) async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
  dynamic public func unmuteUser(_ user: ChatSDK.User, completionHandler: ChatSDK.GIMErrorHandler?)
  @available(iOS 13.0, *)
  dynamic public func unmuteUser(_ user: ChatSDK.User) async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
  dynamic public func createMutedUserListQuery() -> ChatSDK.MutedUserListQuery?
  dynamic public func createMutedUserListQuery(paramsBuilder: (ChatSDK.MutedUserListQueryParams) -> Swift.Void) -> ChatSDK.MutedUserListQuery?
  dynamic public func createMutedUserListQuery(params: ChatSDK.MutedUserListQueryParams) -> ChatSDK.MutedUserListQuery?
  dynamic public class func createMutedUserListQuery(channelType: ChatSDK.ChannelType, channelURL: Swift.String) -> ChatSDK.MutedUserListQuery
  dynamic public class func createMutedUserListQuery(channelType: ChatSDK.ChannelType, channelURL: Swift.String, paramsBuilder: (ChatSDK.MutedUserListQueryParams) -> Swift.Void) -> ChatSDK.MutedUserListQuery
  dynamic public class func createMutedUserListQuery(channelType: ChatSDK.ChannelType, channelURL: Swift.String, params: ChatSDK.MutedUserListQueryParams) -> ChatSDK.MutedUserListQuery
}
extension ChatSDK.BaseChannel {
  dynamic public func freeze(completionHandler: ChatSDK.GIMErrorHandler?)
  @available(iOS 13.0, *)
  dynamic public func freeze() async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
  dynamic public func unfreeze(completionHandler: ChatSDK.GIMErrorHandler?)
  @available(iOS 13.0, *)
  dynamic public func unfreeze() async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
}
extension ChatSDK.BaseChannel {
  dynamic public func sendFileMessage(params: ChatSDK.FileMessageCreateParams, completionHandler: ChatSDK.FileMessageHandler?) -> ChatSDK.FileMessage?
  dynamic public func sendFileMessage(params: ChatSDK.FileMessageCreateParams, progressHandler: ChatSDK.MultiProgressHandler?, completionHandler: ChatSDK.FileMessageHandler?) -> ChatSDK.FileMessage?
  dynamic public func updateFileMessage(messageId: Swift.Int64, params: ChatSDK.FileMessageUpdateParams, completionHandler: ChatSDK.FileMessageHandler?)
  @available(iOS 13.0, *)
  dynamic public func updateFileMessage(messageId: Swift.Int64, params: ChatSDK.FileMessageUpdateParams) async throws -> Swift.Result<ChatSDK.FileMessage, ChatSDK.GIMError>
  dynamic public func resendFileMessage(_ message: ChatSDK.FileMessage, binaryData: Foundation.Data?, completionHandler: ChatSDK.FileMessageHandler?) -> ChatSDK.FileMessage?
  dynamic public func resendFileMessage(_ message: ChatSDK.FileMessage, binaryData: Foundation.Data?, progressHandler: ChatSDK.MultiProgressHandler?, completionHandler: ChatSDK.FileMessageHandler?) -> ChatSDK.FileMessage?
  dynamic public func copyFileMessage(_ message: ChatSDK.FileMessage, toTargetChannel targetChannel: ChatSDK.BaseChannel, completionHandler: ChatSDK.FileMessageHandler?) -> ChatSDK.FileMessage?
  dynamic public class func cancelUploadingFileMessage(requestId: Swift.String, completionHandler: ((_ result: Swift.Bool, _ error: ChatSDK.GIMError?) -> Swift.Void)?)
}
extension ChatSDK.BaseChannel {
  dynamic public func deleteMessage(_ message: ChatSDK.BaseMessage, completionHandler: ChatSDK.GIMErrorHandler?)
  @available(iOS 13.0, *)
  dynamic public func deleteMessage(_ message: ChatSDK.BaseMessage) async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
  dynamic public func deleteMessage(messageId: Swift.Int64, completionHandler: ChatSDK.GIMErrorHandler?)
  @available(iOS 13.0, *)
  dynamic public func deleteMessage(messageId: Swift.Int64) async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
}
extension ChatSDK.GroupChannel {
  dynamic public func updatePoll(pollId: Swift.Int64, params: ChatSDK.PollUpdateParams, completionHandler: ChatSDK.PollHandler?)
  @available(iOS 13.0, *)
  dynamic public func updatePoll(pollId: Swift.Int64, params: ChatSDK.PollUpdateParams) async throws -> Swift.Result<ChatSDK.Poll, ChatSDK.GIMError>
  dynamic public func deletePoll(pollId: Swift.Int64, completionHandler: ChatSDK.GIMErrorHandler?)
  @available(iOS 13.0, *)
  dynamic public func deletePoll(pollId: Swift.Int64) async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
  dynamic public func closePoll(pollId: Swift.Int64, completionHandler: ChatSDK.PollHandler?)
  @available(iOS 13.0, *)
  dynamic public func closePoll(pollId: Swift.Int64) async throws -> Swift.Result<ChatSDK.Poll, ChatSDK.GIMError>
  dynamic public func addPollOption(pollId: Swift.Int64, optionText: Swift.String, completionHandler: ChatSDK.PollHandler?)
  @available(iOS 13.0, *)
  dynamic public func addPollOption(pollId: Swift.Int64, optionText: Swift.String) async throws -> Swift.Result<ChatSDK.Poll, ChatSDK.GIMError>
  dynamic public func updatePollOption(pollId: Swift.Int64, pollOptionId: Swift.Int64, optionText: Swift.String, completionHandler: ChatSDK.PollHandler?)
  @available(iOS 13.0, *)
  dynamic public func updatePollOption(pollId: Swift.Int64, pollOptionId: Swift.Int64, optionText: Swift.String) async throws -> Swift.Result<ChatSDK.Poll, ChatSDK.GIMError>
  dynamic public func deletePollOption(pollId: Swift.Int64, pollOptionId: Swift.Int64, completionHandler: ChatSDK.GIMErrorHandler?)
  @available(iOS 13.0, *)
  dynamic public func deletePollOption(pollId: Swift.Int64, pollOptionId: Swift.Int64) async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
  dynamic public func votePoll(pollId: Swift.Int64, pollOptionIds: [Swift.Int64], completionHandler: ChatSDK.PollVoteEventHandler)
  @available(iOS 13.0, *)
  dynamic public func votePoll(pollId: Swift.Int64, pollOptionIds: [Swift.Int64]) async throws -> Swift.Result<ChatSDK.PollVoteEvent, ChatSDK.GIMError>
  dynamic public func createPollListQuery(limit: Swift.UInt = 20) -> ChatSDK.PollListQuery?
  dynamic public func createPollVoterListQuery(pollId: Swift.Int64, pollOptionId: Swift.Int64, limit: Swift.UInt = 20) -> ChatSDK.PollVoterListQuery
  dynamic public func createPollVoterListQuery(pollId: Swift.Int64, pollOptionId: Swift.Int64) -> ChatSDK.PollVoterListQuery
}
extension ChatSDK.BaseChannel {
  dynamic public func getMessagesByTimestamp(_ timestamp: Swift.Int64, params: ChatSDK.MessageListParams, completionHandler: ChatSDK.MessageListHandler?)
  @available(iOS 13.0, *)
  dynamic public func getMessagesByTimestamp(_ timestamp: Swift.Int64, params: ChatSDK.MessageListParams) async throws -> Swift.Result<[ChatSDK.BaseMessage], ChatSDK.GIMError>
  dynamic public func getMessagesByMessageId(_ messageId: Swift.Int64, params: ChatSDK.MessageListParams, completionHandler: ChatSDK.MessageListHandler?)
  @available(iOS 13.0, *)
  dynamic public func getMessagesByMessageId(_ messageId: Swift.Int64, params: ChatSDK.MessageListParams) async throws -> Swift.Result<[ChatSDK.BaseMessage], ChatSDK.GIMError>
}
extension ChatSDK.BaseChannel {
  dynamic public func getMessageChangeLogs(token: Swift.String?, params: ChatSDK.MessageChangeLogsParams, completionHandler: ChatSDK.MessageChangeLogHandler?)
  @available(iOS 13.0, *)
  dynamic public func getMessageChangeLogs(token: Swift.String?, params: ChatSDK.MessageChangeLogsParams) async throws -> Swift.Result<ChatSDK.MessageChangeLog, ChatSDK.GIMError>
  dynamic public func getMessageChangeLogs(timestamp: Swift.Int64, params: ChatSDK.MessageChangeLogsParams, completionHandler: ChatSDK.MessageChangeLogHandler?)
  @available(iOS 13.0, *)
  dynamic public func getMessageChangeLogs(timestamp: Swift.Int64, params: ChatSDK.MessageChangeLogsParams) async throws -> Swift.Result<ChatSDK.MessageChangeLog, ChatSDK.GIMError>
}
extension ChatSDK.BaseChannel {
  dynamic public func addReaction(with message: ChatSDK.BaseMessage, key: Swift.String, completionHandler: ChatSDK.ReactionEventHandler?)
  @available(iOS 13.0, *)
  dynamic public func addReaction(with message: ChatSDK.BaseMessage, key: Swift.String) async throws -> Swift.Result<ChatSDK.ReactionEvent, ChatSDK.GIMError>
  dynamic public func deleteReaction(with message: ChatSDK.BaseMessage, key: Swift.String, completionHandler: ChatSDK.ReactionEventHandler?)
  @available(iOS 13.0, *)
  dynamic public func deleteReaction(with message: ChatSDK.BaseMessage, key: Swift.String) async throws -> Swift.Result<ChatSDK.ReactionEvent, ChatSDK.GIMError>
}
extension ChatSDK.BaseChannel {
  dynamic public func createMetaData(_ metaData: [Swift.String : Swift.String], completionHandler: ChatSDK.MetaDataHandler?)
  @available(iOS 13.0, *)
  dynamic public func createMetaData(_ metaData: [Swift.String : Swift.String]) async throws -> Swift.Result<[Swift.String : Swift.String], ChatSDK.GIMError>
  dynamic public func getMetaData(keys: [Swift.String], completionHandler: ChatSDK.MetaDataHandler?)
  @available(iOS 13.0, *)
  dynamic public func getMetaData(keys: [Swift.String]) async throws -> Swift.Result<[Swift.String : Swift.String], ChatSDK.GIMError>
  dynamic public func getAllMetaData(completionHandler: ChatSDK.MetaDataHandler?)
  @available(iOS 13.0, *)
  dynamic public func getAllMetaData() async throws -> Swift.Result<[Swift.String : Swift.String], ChatSDK.GIMError>
  dynamic public func updateMetaData(_ metaData: [Swift.String : Swift.String], completionHandler: ChatSDK.MetaDataHandler?)
  @available(iOS 13.0, *)
  dynamic public func updateMetaData(_ metaData: [Swift.String : Swift.String]) async throws -> Swift.Result<[Swift.String : Swift.String], ChatSDK.GIMError>
  dynamic public func deleteMetaData(key: Swift.String, completionHandler: ChatSDK.GIMErrorHandler?)
  @available(iOS 13.0, *)
  dynamic public func deleteMetaData(key: Swift.String) async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
  dynamic public func deleteAllMetaData(completionHandler: ChatSDK.GIMErrorHandler?)
  @available(iOS 13.0, *)
  dynamic public func deleteAllMetaData() async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
  dynamic public func getCachedMetaData() -> [Swift.String : Swift.String]
}
extension ChatSDK.BaseChannel {
  dynamic public func createMessageMetaArrayKeys(message: ChatSDK.BaseMessage, keys: [Swift.String], completionHandler: ChatSDK.BaseMessageHandler?)
  @available(iOS 13.0, *)
  dynamic public func createMessageMetaArrayKeys(message: ChatSDK.BaseMessage, keys: [Swift.String]) async throws -> Swift.Result<ChatSDK.BaseMessage, ChatSDK.GIMError>
  dynamic public func deleteMessageMetaArrayKeys(message: ChatSDK.BaseMessage, keys: [Swift.String], completionHandler: ChatSDK.BaseMessageHandler?)
  @available(iOS 13.0, *)
  dynamic public func deleteMessageMetaArrayKeys(message: ChatSDK.BaseMessage, keys: [Swift.String]) async throws -> Swift.Result<ChatSDK.BaseMessage, ChatSDK.GIMError>
  dynamic public func addMessageMetaArrayValues(message: ChatSDK.BaseMessage, keyValues: [Swift.String : [Swift.String]], completionHandler: ChatSDK.BaseMessageHandler?)
  @available(iOS 13.0, *)
  dynamic public func addMessageMetaArrayValues(message: ChatSDK.BaseMessage, keyValues: [Swift.String : [Swift.String]]) async throws -> Swift.Result<ChatSDK.BaseMessage, ChatSDK.GIMError>
  dynamic public func addMessageMetaArrayValues(message: ChatSDK.BaseMessage, metaArrays: [ChatSDK.MessageMetaArray], completionHandler: ChatSDK.BaseMessageHandler?)
  @available(iOS 13.0, *)
  dynamic public func addMessageMetaArrayValues(message: ChatSDK.BaseMessage, metaArrays: [ChatSDK.MessageMetaArray]) async throws -> Swift.Result<ChatSDK.BaseMessage, ChatSDK.GIMError>
  dynamic public func removeMessageMetaArrayValues(message: ChatSDK.BaseMessage, keyValues: [Swift.String : [Swift.String]], completionHandler: ChatSDK.BaseMessageHandler?)
  @available(iOS 13.0, *)
  dynamic public func removeMessageMetaArrayValues(message: ChatSDK.BaseMessage, keyValues: [Swift.String : [Swift.String]]) async throws -> Swift.Result<ChatSDK.BaseMessage, ChatSDK.GIMError>
  dynamic public func removeMessageMetaArrayValues(message: ChatSDK.BaseMessage, metaArrays: [ChatSDK.MessageMetaArray], completionHandler: ChatSDK.BaseMessageHandler?)
  @available(iOS 13.0, *)
  dynamic public func removeMessageMetaArrayValues(message: ChatSDK.BaseMessage, metaArrays: [ChatSDK.MessageMetaArray]) async throws -> Swift.Result<ChatSDK.BaseMessage, ChatSDK.GIMError>
}
extension ChatSDK.BaseChannel {
  dynamic public func sendUserMessage(_ message: Swift.String, completionHandler: ChatSDK.UserMessageHandler?) -> ChatSDK.UserMessage
  dynamic public func sendUserMessage(params: ChatSDK.UserMessageCreateParams, completionHandler: ChatSDK.UserMessageHandler?) -> ChatSDK.UserMessage
  dynamic public func resendUserMessage(_ message: ChatSDK.UserMessage, completionHandler: ChatSDK.UserMessageHandler?) -> ChatSDK.UserMessage
  dynamic public func copyUserMessage(_ message: ChatSDK.UserMessage, toTargetChannel targetChannel: ChatSDK.BaseChannel, completionHandler: ChatSDK.UserMessageHandler?) -> ChatSDK.UserMessage?
  dynamic public func updateUserMessage(messageId: Swift.Int64, params: ChatSDK.UserMessageUpdateParams, completionHandler: ChatSDK.UserMessageHandler?)
  @available(iOS 13.0, *)
  dynamic public func updateUserMessage(messageId: Swift.Int64, params: ChatSDK.UserMessageUpdateParams) async throws -> Swift.Result<ChatSDK.UserMessage, ChatSDK.GIMError>
}
extension ChatSDK.BaseChannel {
  dynamic public func pinMessage(messageId: Swift.Int64, completionHandler: ChatSDK.GIMErrorHandler?)
  @available(iOS 13.0, *)
  dynamic public func pinMessage(messageId: Swift.Int64) async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
  dynamic public func unpinMessage(messageId: Swift.Int64, completionHandler: ChatSDK.GIMErrorHandler?)
  @available(iOS 13.0, *)
  dynamic public func unpinMessage(messageId: Swift.Int64) async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
}
extension ChatSDK.BaseChannel {
  dynamic public func createPinnedMessageListQuery() -> ChatSDK.PinnedMessageListQuery
  dynamic public func createPinnedMessageListQuery(paramsBuilder: (ChatSDK.PinnedMessageListQueryParams) -> Swift.Void) -> ChatSDK.PinnedMessageListQuery
  dynamic public func createPinnedMessageListQuery(params: ChatSDK.PinnedMessageListQueryParams) -> ChatSDK.PinnedMessageListQuery
  dynamic public class func createPinnedMessageListQuery(channelType: ChatSDK.ChannelType, channelURL: Swift.String) -> ChatSDK.PinnedMessageListQuery
  dynamic public class func createPinnedMessageListQuery(channelType: ChatSDK.ChannelType, channelURL: Swift.String, paramsBuilder: (ChatSDK.PinnedMessageListQueryParams) -> Swift.Void) -> ChatSDK.PinnedMessageListQuery
  dynamic public class func createPinnedMessageListQuery(channelType: ChatSDK.ChannelType, channelURL: Swift.String, params: ChatSDK.PinnedMessageListQueryParams) -> ChatSDK.PinnedMessageListQuery
}
extension ChatSDK.BaseChannel {
  public func sendCustomEvent(message: Swift.String, completionHandler: ChatSDK.GIMErrorHandler?)
  @available(iOS 13.0, *)
  public func sendCustomEvent(message: Swift.String) async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
}
public typealias GetPushTokensHandler = ((_ pushTokens: [Swift.String], _ pushTokenType: ChatSDK.PushTokenType, _ hasMore: Swift.Bool, _ token: Swift.String?, _ error: ChatSDK.GIMError?) -> Swift.Void)
public struct PushTokens {
}
public typealias PinnedMessageListHandler = ((_ messages: [ChatSDK.BaseMessage]?, _ error: ChatSDK.GIMError?) -> Swift.Void)
@objc @_hasMissingDesignatedInitializers public class PollVoteEvent : ObjectiveC.NSObject, Swift.Decodable {
  final public let pollId: Swift.Int64
  final public let updatedVoteCounts: [ChatSDK.UpdatedVoteCount]
  final public let timestamp: Swift.Int64
  final public let messageId: Swift.Int64
  final public let votedOptionIds: [Swift.Int64]
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class PinnedMessageListQueryParams : ObjectiveC.NSObject {
  final public var includeMetaArray: Swift.Bool
  final public var includeReactions: Swift.Bool
  final public var includeThreadInfo: Swift.Bool
  final public var includeParentMessageInfo: Swift.Bool
  final public var includePollDetails: Swift.Bool
  final public var limit: Swift.Int
  @objc override dynamic public init()
  convenience public init(builder: (ChatSDK.PinnedMessageListQueryParams) -> Swift.Void)
  @objc deinit
}
extension ChatSDK.PinnedMessageListQueryParams : Foundation.NSCopying {
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
public typealias RestrictedUserListHandler = (_ users: [ChatSDK.RestrictedUser]?, _ error: ChatSDK.GIMError?) -> Swift.Void
@objc @_hasMissingDesignatedInitializers public class Sender : ChatSDK.User {
  public var role: ChatSDK.Role {
    get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class GIMChatOptions : ObjectiveC.NSObject {
  public class func useMemberInfoInMessage() -> Swift.Bool
  public class func setMemberInfoInMessage(_ value: Swift.Bool)
  public class func getConnectionTimeout() -> Foundation.TimeInterval
  public class func setConnectionTimeout(_ timeout: Swift.Int)
  public class func getTypingIndicatorThrottle() -> Foundation.TimeInterval
  public class func setTypingIndicatorThrottle(_ interval: Foundation.TimeInterval)
  public class func getWebSocketResponseTimeout() -> Foundation.TimeInterval
  public class func setWebSocketResponseTimeout(_ timeout: Swift.Int)
  public class func setAutoResendMessage(_ value: Swift.Bool)
  public class func getAutoResendMessage() -> Swift.Bool
  public class func setMultiUploadCount(_ count: Swift.Int)
  public class func getMultiUploadCount() -> Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
@objc public class MessageListParams : ObjectiveC.NSObject, Foundation.NSCopying {
  public var previousResultSize: Swift.Int
  public var nextResultSize: Swift.Int
  public var isInclusive: Swift.Bool
  public var reverse: Swift.Bool
  public var messageTypeFilter: ChatSDK.MessageTypeFilter
  public var customType: Swift.String?
  public var senderUserIds: [Swift.String]?
  public var includeMetaArray: Swift.Bool
  public var includeReactions: Swift.Bool
  public var includeThreadInfo: Swift.Bool
  public var includeParentMessageInfo: Swift.Bool
  public var replyType: ChatSDK.ReplyType
  public var customTypes: [Swift.String]?
  public init(previousResultSize: Swift.Int = 20, nextResultSize: Swift.Int = 0, isInclusive: Swift.Bool = false, reverse: Swift.Bool = false, messageTypeFilter: ChatSDK.MessageTypeFilter = .all, customType: Swift.String? = nil, senderUserIds: [Swift.String]? = nil, includeMetaArray: Swift.Bool = false, includeReactions: Swift.Bool = false, includeThreadInfo: Swift.Bool = false, includeParentMessageInfo: Swift.Bool = false, replyType: ChatSDK.ReplyType = .none, showSubChannelMessagesOnly: Swift.Bool = false, customTypes: [Swift.String]? = nil)
  public func belongsTo(_ message: ChatSDK.BaseMessage) -> Swift.Bool
  public func belongsToMessageParams(_ params: ChatSDK.BaseMessageCreateParams) -> Swift.Bool
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
extension ChatSDK.MessageListParams {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
}
public enum ReportCategory : Swift.String, Swift.Encodable {
  case suspicious
  case harassing
  case spam
  case inappropriate
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UserMessage : ChatSDK.BaseMessage {
  public var poll: ChatSDK.Poll? {
    get
  }
  public var pollId: Swift.Int64?
  override public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
extension ChatSDK.UserMessage {
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers public class GroupChannelUpdateParams : ObjectiveC.NSObject, Swift.Encodable, ChatSDK.Serializable {
  public var name: Swift.String?
  public var coverURL: Swift.String?
  public var coverImage: Foundation.Data?
  public var data: Swift.String?
  public var customType: Swift.String?
  public var isPublic: Swift.Bool?
  public var isDistinct: Swift.Bool?
  public var isDiscoverable: Swift.Bool?
  public var accessCode: Swift.String?
  public var operatorUserIds: [Swift.String]?
  public var messageSurvivalSeconds: Swift.Int?
  @objc override dynamic public init()
  public func setOperators(_ operators: [ChatSDK.User])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
precedencegroup ColumnAssignment {
  associativity: left
  assignment: true
  lowerThan: AssignmentPrecedence
}
infix operator <- : ColumnAssignment
public enum PublicGroupChannelListOrder : Swift.Int, Swift.CaseIterable {
  case chronological
  case channelNameAlphabetical
  case channelMetaDataValueAlphabetical
  public typealias AllCases = [ChatSDK.PublicGroupChannelListOrder]
  nonisolated public static var allCases: [ChatSDK.PublicGroupChannelListOrder] {
    get
  }
}
extension ChatSDK.PublicGroupChannelListOrder : Swift.RawRepresentable, Swift.Codable {
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init(rawValue: Swift.String)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
extension ChatSDK.PublicGroupChannelListOrder : Swift.Equatable {
}
extension ChatSDK.PublicGroupChannelListOrder : Swift.Hashable {
}
public typealias ReactionEventHandler = ((_ event: ChatSDK.ReactionEvent?, _ error: ChatSDK.GIMError?) -> Swift.Void)
@objc @_hasMissingDesignatedInitializers public class UpdatedVoteCount : ObjectiveC.NSObject, Swift.Decodable {
  final public let pollOptionId: Swift.Int64
  final public let voteCount: Swift.Int64
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
public enum UserConnectionStatus : Swift.Int, Swift.Codable {
  case nonAvailable
  case online
  case offline
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers public class Member : ChatSDK.User {
  public var state: ChatSDK.MemberState
  public var isMuted: Swift.Bool
  public var role: ChatSDK.Role
  public var restrictionInfo: ChatSDK.RestrictionInfo?
  override public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
public protocol Mappable : Swift.Decodable, Swift.Encodable {
  static func initWithDictionary(_ json: [Swift.String : Any]) -> Self?
  func _toDictionary() -> [Swift.String : Any]
}
extension ChatSDK.Mappable {
  public static func initWithDictionary(_ json: [Swift.String : Any]) -> Self?
  public func _toDictionary() -> [Swift.String : Any]
}
@objc @_inheritsConvenienceInitializers public class OpenChannelCreateParams : ObjectiveC.NSObject, Foundation.NSCopying, Swift.Encodable, ChatSDK.Serializable {
  public var name: Swift.String?
  public var channelURL: Swift.String?
  public var coverURL: Swift.String?
  public var coverImage: Foundation.Data?
  public var coverImageName: Swift.String?
  public var data: Swift.String?
  public var operatorUserIds: [Swift.String]?
  public var customType: Swift.String?
  @objc override dynamic convenience public init()
  public init(name: Swift.String? = nil, channelURL: Swift.String? = nil, coverURL: Swift.String? = nil, coverImage: Foundation.Data? = nil, coverImageName: Swift.String? = nil, data: Swift.String? = nil, operatorUserIds: [Swift.String]? = nil, customType: Swift.String? = nil)
  public func setOperators(_ operators: [ChatSDK.User])
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class PollRetrievalParams : ObjectiveC.NSObject {
  public var channelURL: Swift.String?
  public var channelType: ChatSDK.ChannelType
  public var pollId: Swift.Int64
  @objc override dynamic public init()
  @objc deinit
}
extension ChatSDK.PollRetrievalParams : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc public class ThreadedMessageListParams : ObjectiveC.NSObject, Foundation.NSCopying {
  public var previousResultSize: Swift.Int
  public var nextResultSize: Swift.Int
  public var isInclusive: Swift.Bool
  public var reverse: Swift.Bool
  public var messageTypeFilter: ChatSDK.MessageTypeFilter
  public var customType: Swift.String?
  public var senderUserIds: [Swift.String]?
  public var includeMetaArray: Swift.Bool
  public var includeReactions: Swift.Bool
  public var includeParentMessageInfo: Swift.Bool
  public var includeThreadInfo: Swift.Bool
  public var includeReplyType: Swift.String?
  public var customTypes: [Swift.String]?
  public init(previousResultSize: Swift.Int = 0, nextResultSize: Swift.Int = 0, isInclusive: Swift.Bool = false, reverse: Swift.Bool = false, messageTypeFilter: ChatSDK.MessageTypeFilter = .all, customType: Swift.String? = nil, senderUserIds: [Swift.String]? = nil, includeMetaArray: Swift.Bool = false, includeReactions: Swift.Bool = false, includeParentMessageInfo: Swift.Bool = false, customTypes: [Swift.String]? = nil, includeThreadInfo: Swift.Bool = false, includeReplyType: Swift.String? = nil)
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class MutedUserListQueryParams : ObjectiveC.NSObject {
  final public var limit: Swift.UInt
  @objc override dynamic public init()
  public init(builder: (ChatSDK.MutedUserListQueryParams) -> Swift.Void)
  @objc deinit
}
extension ChatSDK.MutedUserListQueryParams {
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
}
extension ChatSDK.MutedUserListQueryParams : Foundation.NSCopying {
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@objc @_hasMissingDesignatedInitializers public class MessageSearchQuery : ObjectiveC.NSObject, ChatSDK.Serializable {
  public var hasNext: Swift.Bool {
    get
  }
  public var isLoading: Swift.Bool {
    get
  }
  public var totalCount: Swift.Int32 {
    get
  }
  dynamic public var limit: Swift.UInt {
    get
  }
  dynamic public var keyword: Swift.String? {
    get
  }
  dynamic public var channelURL: Swift.String? {
    get
  }
  dynamic public var channelCustomType: Swift.String? {
    get
  }
  dynamic public var reverse: Swift.Bool {
    get
  }
  dynamic public var exactMatch: Swift.Bool {
    get
  }
  dynamic public var messageTimestampFrom: Swift.Int64 {
    get
  }
  dynamic public var messageTimestampTo: Swift.Int64 {
    get
  }
  dynamic public var order: ChatSDK.MessageSearchQueryOrder {
    get
  }
  dynamic public var advancedQuery: Swift.Bool {
    get
  }
  dynamic public var targetFields: [Swift.String]? {
    get
  }
  public func loadNextPage(completionHandler: @escaping ChatSDK.MessageListHandler)
  @available(iOS 13.0, *)
  public func loadNextPage() async throws -> Swift.Result<[ChatSDK.BaseMessage], ChatSDK.GIMError>
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension ChatSDK.MessageSearchQuery : Foundation.NSCopying {
  @objc dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
public typealias BaseChannelHandler = ((_ channel: ChatSDK.BaseChannel?, _ error: ChatSDK.GIMError?) -> Swift.Void)
public enum CountPreference : Swift.String, Swift.Codable {
  case all
  case unreadMessageCountOnly
  case unreadMentionCountOnly
  case off
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_hasMissingDesignatedInitializers public class PreviousMessageListQuery : ObjectiveC.NSObject {
  dynamic public var includeReactions: Swift.Bool {
    get
    set
  }
  dynamic public var showSubChannelMessagesOnly: Swift.Bool {
    get
    set
  }
  dynamic public var includeThreadInfo: Swift.Bool {
    get
    set
  }
  dynamic public var includeParentMessageInfo: Swift.Bool {
    get
    set
  }
  dynamic public var includeMetaArray: Swift.Bool {
    get
    set
  }
  dynamic public var replyType: ChatSDK.ReplyType {
    get
    set
  }
  public var hasNext: Swift.Bool {
    get
  }
  public var isLoading: Swift.Bool {
    get
  }
  public func loadNextPage(completionHandler: @escaping ChatSDK.MessageListHandler)
  @available(iOS 13.0, *)
  public func loadNextPage() async throws -> Swift.Result<[ChatSDK.BaseMessage], ChatSDK.GIMError>
  @objc deinit
}
extension ChatSDK.PreviousMessageListQuery {
  dynamic public var reverse: Swift.Bool {
    get
  }
  dynamic public var messageTypeFilter: ChatSDK.MessageTypeFilter {
    get
  }
  dynamic public var customTypeFilter: Swift.String? {
    get
  }
  dynamic public var customTypesFilter: [Swift.String]? {
    get
  }
  dynamic public var senderUserIdsFilter: [Swift.String]? {
    get
  }
  dynamic public var limit: Swift.UInt {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AdminMessage : ChatSDK.BaseMessage {
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
public typealias GIMObjectComparator = (_ obj1: Any?, _ obj2: Any?) -> Foundation.ComparisonResult
public enum PollStatus : Swift.String, Swift.Codable {
  case open
  case closed
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ChannelHiddenStateFilter : Swift.String, Swift.Codable {
  case unhiddenOnly
  case hiddenOnly
  case hiddenAllowAutoUnhide
  case hiddenPreventAutoUnhide
  case all
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum Role : Swift.String, Swift.Codable {
  case none
  case `operator`
  public init(from decoder: any Swift.Decoder) throws
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc public class ScheduledBaseMessageCreateParams : ObjectiveC.NSObject, Swift.Codable {
  public var scheduledAt: Swift.Int64
  public var data: Swift.String?
  public var customType: Swift.String?
  public var pushNotificationDeliveryOption: ChatSDK.PushNotificationDeliveryOption
  public var metaArrays: [ChatSDK.MessageMetaArray]?
  public var mentionType: ChatSDK.MentionType
  public var mentionedUserIds: [Swift.String]?
  public var mentionedUsers: [ChatSDK.User]?
  public func addMentionedUserIds(_ userIds: [Swift.String])
  public func encode(to encoder: any Swift.Encoder) throws
  public init(scheduledAt: Swift.Int64)
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers public class PinnedMessageListQuery : ObjectiveC.NSObject {
  public var hasNext: Swift.Bool {
    get
  }
  public var isLoading: Swift.Bool {
    get
  }
  public var includeMetaArray: Swift.Bool {
    get
  }
  public var includeReactions: Swift.Bool {
    get
  }
  public var includeThreadInfo: Swift.Bool {
    get
  }
  public var includeParentMessageInfo: Swift.Bool {
    get
  }
  public var includePollDetails: Swift.Bool {
    get
  }
  public var limit: Swift.Int {
    get
  }
  public func loadNextPage(completionHandler: @escaping ChatSDK.PinnedMessageListHandler)
  @available(iOS 13.0, *)
  public func loadNextPage() async throws -> Swift.Result<[ChatSDK.BaseMessage], ChatSDK.GIMError>
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class Thumbnail : ObjectiveC.NSObject, ChatSDK.Serializable {
  public var url: Swift.String {
    get
  }
  public var maxSize: CoreFoundation.CGSize {
    get
  }
  public var realSize: CoreFoundation.CGSize {
    get
  }
  public var plainURL: Swift.String? {
    get
  }
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
extension ChatSDK.Thumbnail {
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
}
public typealias PollOptionHandler = (_ option: ChatSDK.PollOption?, _ error: ChatSDK.GIMError?) -> Swift.Void
@objc @_hasMissingDesignatedInitializers public class ThreadInfo : ObjectiveC.NSObject, Swift.Codable {
  final public let replyCount: Swift.Int
  final public let mostRepliedUsers: [ChatSDK.User]
  final public let lastRepliedAt: Swift.Int64
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public typealias MetaDataHandler = ((_ metaData: [Swift.String : Swift.String]?, _ error: ChatSDK.GIMError?) -> Swift.Void)
public enum MessageSearchQueryOrder : Swift.String, Swift.Codable {
  case score
  case timestamp
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_hasMissingDesignatedInitializers public class RestrictedUser : ChatSDK.User {
  public var restrictionInfo: ChatSDK.RestrictionInfo? {
    get
  }
  override public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class PollVoterListQuery : ObjectiveC.NSObject {
  public var limit: Swift.UInt {
    get
  }
  public var hasNext: Swift.Bool {
    get
  }
  public var isLoading: Swift.Bool {
    get
  }
  public func loadNextPage(completionHandler: @escaping ChatSDK.VoterListHandler)
  @available(iOS 13.0, *)
  public func loadNextPage() async throws -> Swift.Result<[ChatSDK.User], ChatSDK.GIMError>
  public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class ApplicationUserListQueryParams : ObjectiveC.NSObject {
  final public var userIdsFilter: [Swift.String]?
  final public var nicknameStartsWithFilter: Swift.String?
  final public var limit: Swift.UInt
  final public var metaDataKeyFilter: Swift.String? {
    get
  }
  final public var metaDataValuesFilter: [Swift.String]? {
    get
  }
  @objc override dynamic public init()
  public init(builder: (ChatSDK.ApplicationUserListQueryParams) -> Swift.Void)
  final public func setMetaDataFilter(key: Swift.String?, values: [Swift.String]?)
  @objc deinit
}
extension ChatSDK.ApplicationUserListQueryParams {
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
}
extension ChatSDK.ApplicationUserListQueryParams : Foundation.NSCopying {
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
public protocol GIMUserEventDelegate : AnyObject {
  func didDiscoverFriends(_ friends: [ChatSDK.User]?)
  func didUpdateTotalUnreadMessageCount(_ totalCount: Swift.Int, totalCountByCustomType: [Swift.String : Swift.Int]?)
  func didUpdateUsers(_ users: [ChatSDK.User])
}
extension ChatSDK.GIMUserEventDelegate {
  public func didDiscoverFriends(_ friends: [ChatSDK.User]?)
  public func didUpdateTotalUnreadMessageCount(_ totalCount: Swift.Int, totalCountByCustomType: [Swift.String : Swift.Int]?)
  public func didUpdateUsers(_ users: [ChatSDK.User])
}
@objc final public class ScheduledUserMessageCreateParams : ChatSDK.ScheduledBaseMessageCreateParams {
  final public var message: Swift.String
  final public var translationTargetLanguages: [Swift.String]?
  public init(scheduledAt: Swift.Int64, message: Swift.String)
  override final public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc public class InitParams : ObjectiveC.NSObject {
  public var applicationId: Swift.String
  public var isLocalCachingEnabled: Swift.Bool
  public var logLevel: ChatSDK.LogLevel
  public var appVersion: Swift.String?
  public init(applicationId: Swift.String, isLocalCachingEnabled: Swift.Bool = false, logLevel: ChatSDK.LogLevel = .none, appVersion: Swift.String? = nil)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class OpenChannelListQuery : ObjectiveC.NSObject {
  public var hasNext: Swift.Bool {
    get
  }
  public var isLoading: Swift.Bool {
    get
  }
  dynamic public var includeFrozenChannel: Swift.Bool {
    get
  }
  dynamic public var includeMetaData: Swift.Bool {
    get
  }
  dynamic public var channelURLFilter: Swift.String? {
    get
  }
  dynamic public var channelNameFilter: Swift.String? {
    get
  }
  dynamic public var customTypeFilter: Swift.String? {
    get
  }
  dynamic public var limit: Swift.UInt {
    get
  }
  public func loadNextPage(completionHandler: @escaping ChatSDK.OpenChannelListHandler)
  @available(iOS 13.0, *)
  public func loadNextPage() async throws -> Swift.Result<[ChatSDK.OpenChannel], ChatSDK.GIMError>
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class BaseMessage : ObjectiveC.NSObject, Swift.Identifiable, ChatSDK.Serializable {
  public typealias ID = Swift.AnyHashable
  public var id: ChatSDK.BaseMessage.ID {
    get
  }
  public var requestId: Swift.String {
    get
  }
  final public var messageId: Swift.Int64 {
    get
  }
  final public var message: Swift.String {
    get
  }
  public var sendingStatus: ChatSDK.MessageSendingStatus {
    get
  }
  public var scheduledInfo: ChatSDK.ScheduledInfo? {
    get
  }
  public var sender: ChatSDK.Sender? {
    get
  }
  final public var channelURL: Swift.String {
    get
  }
  public var channelType: ChatSDK.ChannelType {
    get
  }
  public var mentionedUsers: [ChatSDK.User] {
    get
  }
  public var mentionType: ChatSDK.MentionType {
    get
  }
  public var requestedMentionUserIds: [Swift.String]? {
    get
  }
  public var createdAt: Swift.Int64 {
    get
  }
  public var updatedAt: Swift.Int64 {
    get
  }
  public var parentMessageId: Swift.Int64 {
    get
  }
  public var parentMessage: ChatSDK.BaseMessage? {
    get
    set
  }
  public var threadInfo: ChatSDK.ThreadInfo? {
    get
  }
  public var metaArrays: [ChatSDK.MessageMetaArray]? {
    get
  }
  public var data: Swift.String {
    get
  }
  final public var customType: Swift.String? {
    get
  }
  public var reactions: [ChatSDK.Reaction] {
    get
  }
  public var messageSurvivalSeconds: Swift.Int {
    get
  }
  public var silent: Swift.Bool {
    get
  }
  public var isSilent: Swift.Bool {
    get
  }
  public var errorCode: Swift.UInt {
    get
  }
  final public var plugins: [ChatSDK.Plugin]? {
    get
  }
  final public var isReplyToChannel: Swift.Bool {
    get
  }
  public var isOperatorMessage: Swift.Bool {
    get
  }
  public var mentionedMessageTemplate: Swift.String? {
    get
  }
  public var messageParams: ChatSDK.BaseMessageCreateParams? {
    get
  }
  public var extendedMessage: [Swift.String : Any] {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
extension ChatSDK.BaseMessage {
  dynamic public func copyWithFailedState() -> Self
  dynamic public func copyWithFailedState(errorCode: Swift.Int) -> Self
  public func copyWithFailedState(errorCode: Swift.Int?) -> Self
}
extension ChatSDK.BaseMessage {
  dynamic public func isOpenChannel() -> Swift.Bool
  dynamic public func isGroupChannel() -> Swift.Bool
  dynamic public func isResendable() -> Swift.Bool
  dynamic public func metaArrays(keys: [Swift.String]) -> [ChatSDK.MessageMetaArray]
  @discardableResult
  dynamic public func apply(_ reactionEvent: ChatSDK.ReactionEvent) -> Swift.Bool
  @discardableResult
  dynamic public func apply(_ threadInfoUpdateEvent: ChatSDK.ThreadInfoUpdateEvent) -> Swift.Bool
  dynamic public class func getMessage(params: ChatSDK.MessageRetrievalParams, completionHandler: ChatSDK.BaseMessageHandler?)
  @available(iOS 13.0, *)
  dynamic public class func getMessage(params: ChatSDK.MessageRetrievalParams) async throws -> Swift.Result<ChatSDK.BaseMessage, ChatSDK.GIMError>
  dynamic public func getThreadedMessages(timestamp: Swift.Int64, params: ChatSDK.ThreadedMessageListParams, completionHandler: ChatSDK.ThreadedMessageListHandler?)
  @available(iOS 13.0, *)
  dynamic public func getThreadedMessages(timestamp: Swift.Int64, params: ChatSDK.ThreadedMessageListParams) async throws -> Swift.Result<(parentMessage: ChatSDK.BaseMessage, messages: [ChatSDK.BaseMessage]), ChatSDK.GIMError>
  dynamic public class func getScheduledMessage(params: ChatSDK.ScheduledMessageRetrievalParams, completionHandler: ChatSDK.BaseMessageHandler?)
  @available(iOS 13.0, *)
  dynamic public class func getScheduledMessage(params: ChatSDK.ScheduledMessageRetrievalParams) async throws -> Swift.Result<ChatSDK.BaseMessage, ChatSDK.GIMError>
}
extension ChatSDK.BaseMessage {
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
}
extension ChatSDK.BaseMessage {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
}
public protocol GroupChannelDelegate : ChatSDK.BaseChannelDelegate {
  func channelDidUpdateReadStatus(_ channel: ChatSDK.GroupChannel)
  func channelDidUpdateDeliveryStatus(_ channel: ChatSDK.GroupChannel)
  func channelDidUpdateTypingStatus(_ channel: ChatSDK.GroupChannel)
  func channelDidChangeMemberCount(_ channels: [ChatSDK.GroupChannel])
  func channel(_ channel: ChatSDK.GroupChannel, didReceiveInvitation invitees: [ChatSDK.User]?, inviter: ChatSDK.User?)
  func channel(_ channel: ChatSDK.GroupChannel, didDeclineInvitation invitee: ChatSDK.User, inviter: ChatSDK.User?)
  func channel(_ channel: ChatSDK.GroupChannel, userDidJoin user: ChatSDK.User)
  func channel(_ channel: ChatSDK.GroupChannel, userDidLeave user: ChatSDK.User)
  func channelWasHidden(_ channel: ChatSDK.GroupChannel)
  func channel(_ channel: ChatSDK.GroupChannel, didUpdatePoll event: ChatSDK.PollUpdateEvent)
}
extension ChatSDK.GroupChannelDelegate {
  public func channelDidUpdateReadStatus(_ channel: ChatSDK.GroupChannel)
  public func channelDidUpdateDeliveryStatus(_ channel: ChatSDK.GroupChannel)
  public func channelDidUpdateTypingStatus(_ channel: ChatSDK.GroupChannel)
  public func channelDidChangeMemberCount(_ channels: [ChatSDK.GroupChannel])
  public func channel(_ channel: ChatSDK.GroupChannel, didReceiveInvitation invitees: [ChatSDK.User]?, inviter: ChatSDK.User?)
  public func channel(_ channel: ChatSDK.GroupChannel, didDeclineInvitation invitee: ChatSDK.User, inviter: ChatSDK.User?)
  public func channel(_ channel: ChatSDK.GroupChannel, userDidJoin user: ChatSDK.User)
  public func channel(_ channel: ChatSDK.GroupChannel, userDidLeave user: ChatSDK.User)
  public func channelWasHidden(_ channel: ChatSDK.GroupChannel)
  public func channel(_ channel: ChatSDK.GroupChannel, didUpdatePoll event: ChatSDK.PollUpdateEvent)
}
public enum ChatError : Swift.Int, ChatSDK.GIMErrorCode {
  case parameterDecodeFailure
  case invalidParameterValueString
  case invalidParameterValueNumber
  case invalidParameterValueList
  case invalidParameterValueJson
  case invalidParameterValueBoolean
  case invalidParameterValueRequired
  case invalidParameterValuePositive
  case invalidParameterValueNegative
  case nonAuthorized
  case tokenExpired
  case invalidChannelURL
  case invalidParameterValue
  case unusableCharacterIncluded
  case notFoundInDatabase
  case duplicatedData
  case reachedMaxCount
  case memberReachedMaxCount
  case userDeactivated
  case userNotExist
  case accessTokenNotValid
  case authUnknownError
  case appIdNotValid
  case authUserIdTooLong
  case authPlanQuotaExceeded
  case sessionKeyExpired
  case sessionTokenRevoked
  case invalidApiToken
  case parameterMissing
  case invalidJsonBody
  case blockUser
  case conflict
  case internalServerError
  case rateLimitExceeded
  case messageNotFound
  case channelFreeze
  case unknownError
  case invalidInitialization
  case connectionRequired
  case connectionCanceled
  case invalidParameter
  case notSupported
  case wrongChannelType
  case markAsReadRateLimitExceeded
  case queryInProgress
  case ackTimeout
  case loginTimeout
  case webSocketConnectionClosed
  case webSocketConnectionFailed
  case timerWasExpired
  case timerWasAlreadyDone
  case pendingError
  case passedInvalidAccessToken
  case sessionKeyRefreshSucceeded
  case sessionKeyRefreshFailed
  case collectionDisposed
  case localDatabaseError
  case networkError
  case networkRoutingError
  case malformedData
  case malformedErrorData
  case requestFailed
  case fileUploadCancelFailed
  case fileUploadCanceled
  case fileUploadTimeout
  case fileSizeLimitExceeded
  case socketLoginRequired
  case socketUserNotMember
  case socketUserDeactivated
  case socketUserNotOwnerOfMessage
  case socketUserSendMessageNotAllowed
  case socketInvalidMentionForMessage
  case socketInvalidPushOptionForMessage
  case socketTooManyMetaKeyForMessage
  case socketTooManyMetaValueForMessage
  case socketTooManyMetaArrayForMessage
  case socketGuestNotAllowed
  case socketMutedUserInApplicationSendMessageNotAllowed
  case socketMutedUserInChannelSendMessageNotAllowed
  case socketChannelFrozen
  case socketProfanityMessageBlocked
  case socketBannedUrlsBlocked
  case socketRestrictedDomainBlocked
  case socketModeratedFileBlocked
  case socketEnterDeletedChannel
  case socketBlockedUserReceiveMessageNotAllowed
  case socketDeactivatedUserReceiveMessageNotAllowed
  case socketWrongChannelType
  case socketBannedUserSendMessageNotAllowed
  case socketTooManyMessages
  case socketMessageNotFound
  case socketTooManyParticipants
  case socketChannelNotFound
  public var code: Swift.Int {
    get
  }
  public var message: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum PublicGroupChannelMembershipFilter : Swift.Int, Swift.Codable {
  case all
  case joined
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum ScheduledMessageListOrder : Swift.String, Swift.Codable {
  case createdAt
  case scheduledAt
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_hasMissingDesignatedInitializers public class ThumbnailSize : ObjectiveC.NSObject, Swift.Codable {
  public var maxSize: CoreFoundation.CGSize {
    get
  }
  public class func make(maxSize: CoreFoundation.CGSize) -> ChatSDK.ThumbnailSize
  public class func make(maxWidth: CoreFoundation.CGFloat, maxHeight: CoreFoundation.CGFloat) -> ChatSDK.ThumbnailSize
  public class func make(thumbnail: ChatSDK.Thumbnail) -> ChatSDK.ThumbnailSize
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
public typealias SnoozePeriodHandler = ((_ enabled: Swift.Bool, _ startTimestamp: Swift.Int64, _ endTimestamp: Swift.Int64, _ error: ChatSDK.GIMError?) -> Swift.Void)
public struct SnoozePeriod : Swift.Decodable {
  public let enable: Swift.Bool
  public let startTimestamp: Swift.Int64
  public let endTimestamp: Swift.Int64
  public init(from decoder: any Swift.Decoder) throws
}
public typealias MultiProgressHandler = ((_ requestId: Swift.String?, _ bytesSent: Swift.Int64, _ totalBytesSent: Swift.Int64, _ totalBytesExpectedToSend: Swift.Int64) -> Swift.Void)
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BaseMessageCreateParams : ObjectiveC.NSObject, Swift.Codable, ChatSDK.Serializable {
  public var data: Swift.String?
  public var customType: Swift.String?
  public var pushNotificationDeliveryOption: ChatSDK.PushNotificationDeliveryOption
  public var metaArrays: [ChatSDK.MessageMetaArray]?
  public var mentionType: ChatSDK.MentionType
  public var mentionedUserIds: [Swift.String]?
  public var mentionedUsers: [ChatSDK.User]?
  public var parentMessageId: Swift.Int64
  public var isReplyToChannel: Swift.Bool
  public var isPinnedMessage: Swift.Bool
  @objc override dynamic public init()
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  public func addMentionedUserIds(_ userIds: [Swift.String])
  @objc deinit
}
@objc public class ScheduledMessageRetrievalParams : ObjectiveC.NSObject {
  final public let channelURL: Swift.String
  final public let scheduledMessageId: Swift.Int64
  public init(channelURL: Swift.String, scheduledMessageId: Swift.Int64)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class PollOptionVoterResult : ObjectiveC.NSObject, Swift.Codable {
  final public let voteCount: Swift.UInt
  final public let voters: [ChatSDK.User]
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public typealias CountHandler = (_ count: Swift.Int, _ error: ChatSDK.GIMError?) -> Swift.Void
@objc @_hasMissingDesignatedInitializers final public class PollListQuery : ObjectiveC.NSObject {
  final public var limit: Swift.UInt {
    get
  }
  final public var hasNext: Swift.Bool {
    get
  }
  final public var isLoading: Swift.Bool {
    get
  }
  final public func loadNextPage(completionHandler: @escaping ChatSDK.PollListHandler)
  @available(iOS 13.0, *)
  final public func loadNextPage() async throws -> Swift.Result<[ChatSDK.Poll], ChatSDK.GIMError>
  final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class GroupChannelListQueryParams : ObjectiveC.NSObject {
  final public var includeEmptyChannel: Swift.Bool
  final public var includeFrozenChannel: Swift.Bool
  final public var includeMetaData: Swift.Bool
  final public var order: ChatSDK.GroupChannelListOrder
  final public var queryType: ChatSDK.GroupChannelListQueryType {
    get
  }
  final public var myMemberStateFilter: ChatSDK.MyMemberStateFilter
  final public var channelURLsFilter: [Swift.String]?
  final public var customTypeStartsWithFilter: Swift.String?
  final public var customTypesFilter: [Swift.String]?
  final public var nicknameContainsFilter: Swift.String?
  final public var nicknameStartsWithFilter: Swift.String?
  final public var userIdsIncludeFilter: [Swift.String]? {
    get
  }
  final public var channelNameStartsWithFilter: Swift.String?
  final public var channelNameContainsFilter: Swift.String?
  final public var unreadChannelFilter: ChatSDK.UnreadChannelFilter
  final public var metaDataOrderKeyFilter: Swift.String?
  final public var metaDataKeyFilter: Swift.String?
  final public var metaDataValuesFilter: [Swift.String]?
  final public var metaDataValueStartsWithFilter: Swift.String?
  final public var channelHiddenStateFilter: ChatSDK.ChannelHiddenStateFilter
  final public var limit: Swift.UInt
  @objc override dynamic public init()
  convenience public init(builder: (ChatSDK.GroupChannelListQueryParams) -> Swift.Void)
  final public func setUserIdsIncludeFilter(_ userIds: [Swift.String], queryType: ChatSDK.GroupChannelListQueryType)
  @objc deinit
}
extension ChatSDK.GroupChannelListQueryParams {
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers final public class ScheduledMessageListQueryParams : ObjectiveC.NSObject {
  final public var limit: Swift.Int
  final public var order: ChatSDK.ScheduledMessageListOrder
  final public var reverse: Swift.Bool
  final public var scheduledStatusOptions: ChatSDK.ScheduledStatusOptions
  final public var messageTypeFilter: ChatSDK.MessageTypeFilter
  @objc override dynamic public init()
  convenience public init(builder: (ChatSDK.ScheduledMessageListQueryParams) -> Swift.Void)
  @objc deinit
}
extension ChatSDK.ScheduledMessageListQueryParams {
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
}
extension ChatSDK.ScheduledMessageListQueryParams : Foundation.NSCopying {
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
public typealias VoidHandler = (() -> Swift.Void)
public typealias MetaCountersHandler = ((_ metaData: [Swift.String : Swift.Int]?, _ error: ChatSDK.GIMError?) -> Swift.Void)
@objc @_hasMissingDesignatedInitializers public class RestrictionInfo : ObjectiveC.NSObject, Swift.Codable {
  final public let desc: Swift.String?
  final public let endAt: Swift.Int64
  public var restrictionType: ChatSDK.RestrictionType {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class BaseMessageUpdateParams : ObjectiveC.NSObject, Swift.Encodable {
  public var data: Swift.String?
  public var customType: Swift.String?
  public var mentionType: ChatSDK.MentionType
  public var mentionedUserIds: [Swift.String]?
  public func setMentionedUsers(_ mentionedUsers: [ChatSDK.User])
  public func addMentionedUserIds(_ users: [Swift.String])
  @objc override dynamic public init()
  public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@objc public class MessageChangeLogsParams : ObjectiveC.NSObject {
  public var includeMetaArray: Swift.Bool
  public var includeReactions: Swift.Bool
  public var includeThreadInfo: Swift.Bool
  public var includeParentMessageInfo: Swift.Bool
  public var replyType: ChatSDK.ReplyType
  public init(includeMetaArray: Swift.Bool = false, includeReactions: Swift.Bool = false, includeThreadInfo: Swift.Bool = false, includeParentMessageInfo: Swift.Bool = false, replyType: ChatSDK.ReplyType = .none)
  public class func create(with query: ChatSDK.PreviousMessageListQuery?) -> ChatSDK.MessageChangeLogsParams
  public class func create(with params: ChatSDK.MessageListParams?) -> ChatSDK.MessageChangeLogsParams
  @objc deinit
}
public protocol BaseChannelDelegate : AnyObject {
  func channel(_ channel: ChatSDK.BaseChannel, didPending message: ChatSDK.BaseMessage)
  func channel(_ channel: ChatSDK.BaseChannel, didFailure message: ChatSDK.BaseMessage)
  func channel(_ channel: ChatSDK.BaseChannel, didReceive message: ChatSDK.BaseMessage)
  func channel(_ channel: ChatSDK.BaseChannel, didUpdate message: ChatSDK.BaseMessage)
  func channel(_ channel: ChatSDK.BaseChannel, didReceiveMention message: ChatSDK.BaseMessage)
  func channel(_ channel: ChatSDK.BaseChannel, userWasMuted user: ChatSDK.RestrictedUser)
  func channel(_ channel: ChatSDK.BaseChannel, userWasUnmuted user: ChatSDK.User)
  func channel(_ channel: ChatSDK.BaseChannel, userWasBanned user: ChatSDK.RestrictedUser)
  func channel(_ channel: ChatSDK.BaseChannel, userWasUnbanned user: ChatSDK.User)
  func channelWasFrozen(_ channel: ChatSDK.BaseChannel)
  func channelWasUnfrozen(_ channel: ChatSDK.BaseChannel)
  func channelWasChanged(_ channel: ChatSDK.BaseChannel)
  func channelWasDeleted(_ channelURL: Swift.String, channelType: ChatSDK.ChannelType)
  func channel(_ channel: ChatSDK.BaseChannel, messageWasDeleted messageId: Swift.Int64)
  func channel(_ channel: ChatSDK.BaseChannel, createdMetaData: [Swift.String : Swift.String]?)
  func channel(_ channel: ChatSDK.BaseChannel, updatedMetaData: [Swift.String : Swift.String]?)
  func channel(_ channel: ChatSDK.BaseChannel, deletedMetaDataKeys: [Swift.String]?)
  func channel(_ channel: ChatSDK.BaseChannel, createdMetaCounters: [Swift.String : Swift.Int]?)
  func channel(_ channel: ChatSDK.BaseChannel, updatedMetaCounters: [Swift.String : Swift.Int]?)
  func channel(_ channel: ChatSDK.BaseChannel, deletedMetaCountersKeys: [Swift.String]?)
  func channel(_ channel: ChatSDK.BaseChannel, updatedReaction reactionEvent: ChatSDK.ReactionEvent)
  func channelDidUpdateOperators(_ channel: ChatSDK.BaseChannel)
  func channel(_ channel: ChatSDK.BaseChannel, didUpdateThreadInfo threadInfoUpdateEvent: ChatSDK.ThreadInfoUpdateEvent)
  func channelDidUpdatePinnedMessages(_ channel: ChatSDK.BaseChannel)
  func channel(_ channel: ChatSDK.BaseChannel, pinnedMessageIds: [Swift.Int64], lastPinMessage: ChatSDK.BaseMessage?)
  func channel(_ channel: ChatSDK.BaseChannel, systemMessage: ChatSDK.BaseMessage)
}
extension ChatSDK.BaseChannelDelegate {
  public func channel(_ channel: ChatSDK.BaseChannel, didPending message: ChatSDK.BaseMessage)
  public func channel(_ channel: ChatSDK.BaseChannel, didFailure message: ChatSDK.BaseMessage)
  public func channel(_ channel: ChatSDK.BaseChannel, didReceive message: ChatSDK.BaseMessage)
  public func channel(_ channel: ChatSDK.BaseChannel, didUpdate message: ChatSDK.BaseMessage)
  public func channel(_ channel: ChatSDK.BaseChannel, didReceiveMention message: ChatSDK.BaseMessage)
  public func channel(_ channel: ChatSDK.BaseChannel, userWasMuted user: ChatSDK.RestrictedUser)
  public func channel(_ channel: ChatSDK.BaseChannel, userWasUnmuted user: ChatSDK.User)
  public func channel(_ channel: ChatSDK.BaseChannel, userWasBanned user: ChatSDK.RestrictedUser)
  public func channel(_ channel: ChatSDK.BaseChannel, userWasUnbanned user: ChatSDK.User)
  public func channelWasFrozen(_ channel: ChatSDK.BaseChannel)
  public func channelWasUnfrozen(_ channel: ChatSDK.BaseChannel)
  public func channelWasChanged(_ channel: ChatSDK.BaseChannel)
  public func channelWasDeleted(_ channelURL: Swift.String, channelType: ChatSDK.ChannelType)
  public func channel(_ channel: ChatSDK.BaseChannel, messageWasDeleted messageId: Swift.Int64)
  public func channel(_ channel: ChatSDK.BaseChannel, createdMetaData: [Swift.String : Swift.String]?)
  public func channel(_ channel: ChatSDK.BaseChannel, updatedMetaData: [Swift.String : Swift.String]?)
  public func channel(_ channel: ChatSDK.BaseChannel, deletedMetaDataKeys: [Swift.String]?)
  public func channel(_ channel: ChatSDK.BaseChannel, createdMetaCounters: [Swift.String : Swift.Int]?)
  public func channel(_ channel: ChatSDK.BaseChannel, updatedMetaCounters: [Swift.String : Swift.Int]?)
  public func channel(_ channel: ChatSDK.BaseChannel, deletedMetaCountersKeys: [Swift.String]?)
  public func channel(_ channel: ChatSDK.BaseChannel, updatedReaction reactionEvent: ChatSDK.ReactionEvent)
  public func channelDidUpdateOperators(_ channel: ChatSDK.BaseChannel)
  public func channel(_ channel: ChatSDK.BaseChannel, didUpdateThreadInfo threadInfoUpdateEvent: ChatSDK.ThreadInfoUpdateEvent)
  public func channel(_ channel: ChatSDK.BaseChannel, pinnedMessageIds: [Swift.Int64], lastPinMessage: ChatSDK.BaseMessage?)
  public func channelDidUpdatePinnedMessages(_ channel: ChatSDK.BaseChannel)
  public func channel(_ channel: ChatSDK.BaseChannel, systemMessage: ChatSDK.BaseMessage)
}
@objc public class MessageMetaArray : ObjectiveC.NSObject, ChatSDK.Serializable, Foundation.NSCopying {
  public var key: Swift.String {
    get
  }
  public var value: [Swift.String] {
    get
  }
  convenience public init(key: Swift.String)
  public init(key: Swift.String, value: [Swift.String]?)
  public func addValue(_ value: Swift.Set<Swift.String>)
  public func addValue(with array: [Swift.String])
  public func removeValue(_ value: Swift.Set<Swift.String>)
  public func removeValue(with array: [Swift.String])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension ChatSDK.MessageMetaArray {
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@objc @_inheritsConvenienceInitializers final public class PreviousMessageListQueryParams : ObjectiveC.NSObject {
  final public var reverse: Swift.Bool
  final public var messageTypeFilter: ChatSDK.MessageTypeFilter
  final public var customTypeFilter: Swift.String?
  final public var customTypesFilter: [Swift.String]?
  final public var senderUserIdsFilter: [Swift.String]?
  final public var includeMetaArray: Swift.Bool
  final public var includeReactions: Swift.Bool
  final public var includeThreadInfo: Swift.Bool
  final public var includeParentMessageInfo: Swift.Bool
  final public var replyType: ChatSDK.ReplyType
  final public var showSubChannelMessagesOnly: Swift.Bool
  final public var limit: Swift.UInt
  @objc override dynamic public init()
  convenience public init(builder: (ChatSDK.PreviousMessageListQueryParams) -> Swift.Void)
  @objc deinit
}
extension ChatSDK.PreviousMessageListQueryParams {
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
}
extension ChatSDK.PreviousMessageListQueryParams : Foundation.NSCopying {
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@objc @_inheritsConvenienceInitializers public class GroupChannelCreateParams : ObjectiveC.NSObject, Swift.Codable, ChatSDK.Serializable {
  public var channelURL: Swift.String?
  public var isSuper: Swift.Bool
  public var isBroadcast: Swift.Bool
  public var isExclusive: Swift.Bool
  public var isPublic: Swift.Bool
  public var isDistinct: Swift.Bool
  public var isEphemeral: Swift.Bool
  public var isDiscoverable: Swift.Bool
  public var isStrict: Swift.Bool
  public var customType: Swift.String?
  public var data: Swift.String?
  public var coverURL: Swift.String?
  public var coverImage: Foundation.Data?
  public var name: Swift.String?
  public var operatorUserIds: [Swift.String]?
  public var userIds: [Swift.String]?
  public var accessCode: Swift.String?
  public var messageSurvivalSeconds: Swift.Int
  @objc override dynamic public init()
  public func addUser(_ user: ChatSDK.User)
  public func addUserId(_ userId: Swift.String)
  public func addUsers(_ users: [ChatSDK.User])
  public func addUserIds(_ userIds: [Swift.String])
  public func setOperators(_ operators: [ChatSDK.User])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension ChatSDK.GroupChannelCreateParams : Foundation.NSCopying {
  @objc dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@objc @_inheritsConvenienceInitializers final public class OperatorListQueryParams : ObjectiveC.NSObject {
  final public var limit: Swift.UInt
  @objc override dynamic public init()
  convenience public init(builder: (ChatSDK.OperatorListQueryParams) -> Swift.Void)
  @objc deinit
}
extension ChatSDK.OperatorListQueryParams {
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
}
extension ChatSDK.OperatorListQueryParams : Foundation.NSCopying {
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@objc public class UserMessageUpdateParams : ChatSDK.BaseMessageUpdateParams {
  public var message: Swift.String?
  public var pollId: Swift.Int64
  public var mentionedMessageTemplate: Swift.String?
  public init(message: Swift.String? = nil)
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
public protocol PinnedMessageListDelegate {
  func pinnedMessage(channel: ChatSDK.BaseChannel, add message: ChatSDK.UserMessage)
  func pinnedMessage(channel: ChatSDK.BaseChannel, didUpdate message: ChatSDK.UserMessage)
  func pinnedMessage(channel: ChatSDK.BaseChannel, didDeleted messageId: Swift.Int64)
  func pinnedMessage(deletedChannel channelURL: Swift.String)
}
@objc @_inheritsConvenienceInitializers public class MessageRetrievalParams : ObjectiveC.NSObject, Foundation.NSCopying {
  public var channelURL: Swift.String
  public var channelType: ChatSDK.ChannelType
  public var messageId: Swift.Int64
  public var includeMetaArray: Swift.Bool
  public var includeReactions: Swift.Bool
  public var includeThreadInfo: Swift.Bool
  public var includeParentMessageInfo: Swift.Bool
  @objc override dynamic public init()
  public init(channelURL: Swift.String, channelType: ChatSDK.ChannelType, messageId: Swift.Int64, includeMetaArray: Swift.Bool = false, includeReactions: Swift.Bool = false, includeThreadInfo: Swift.Bool = false, includeParentMessageInfo: Swift.Bool = false)
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
public protocol Serializable : Swift.Decodable, Swift.Encodable {
  func serialize() -> Foundation.Data?
  static func build(fromSerializedData data: Foundation.Data?) -> Self?
}
extension ChatSDK.Serializable {
  public func serialize() -> Foundation.Data?
  public static func build(fromSerializedData data: Foundation.Data?) -> Self?
}
public typealias PollVoteEventHandler = ((_ event: ChatSDK.PollVoteEvent?, _ error: ChatSDK.GIMError?) -> Swift.Void)?
@objc public class Plugin : ObjectiveC.NSObject, Swift.Codable {
  final public let type: Swift.String?
  final public let vendor: Swift.String?
  final public let detail: [Swift.String : Any]?
  public init(type: Swift.String?, vendor: Swift.String?, detail: [Swift.String : Any]?)
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class PollCreateParams : ObjectiveC.NSObject, Swift.Codable {
  public var title: Swift.String
  public var data: ChatSDK.PollData?
  public var optionTexts: [Swift.String]
  public var allowUserSuggestion: Swift.Bool
  public var allowMultipleVotes: Swift.Bool
  public var allowAnonymousVote: Swift.Bool
  public var closeAt: Swift.Int64
  @objc override dynamic public init()
  convenience public init(builder: (ChatSDK.PollCreateParams) -> Swift.Void)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public enum PushTokenRegistrationStatus : Swift.Int, Swift.Codable {
  case success
  case pending
  case error
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public typealias ThreadedMessageListHandler = ((_ parentMessage: ChatSDK.BaseMessage?, _ messages: [ChatSDK.BaseMessage]?, _ error: ChatSDK.GIMError?) -> Swift.Void)
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class FileMessage : ChatSDK.BaseMessage {
  open var url: Swift.String {
    get
  }
  final public var plainURL: Swift.String? {
    get
  }
  final public var name: Swift.String {
    get
  }
  final public var size: Swift.UInt {
    get
  }
  final public var type: Swift.String {
    get
  }
  open var thumbnails: [ChatSDK.Thumbnail]? {
    get
  }
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  public func getFileMessageParams() -> ChatSDK.FileMessageCreateParams?
  public func dispose()
  @objc deinit
}
extension ChatSDK.FileMessage {
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
}
@objc @_hasMissingDesignatedInitializers public class Poll : ObjectiveC.NSObject, ChatSDK.Mappable {
  final public let pollId: Swift.Int64
  public var title: Swift.String {
    get
  }
  final public let createdAt: Swift.Int64
  public var updatedAt: Swift.Int64 {
    get
  }
  public var closeAt: Swift.Int64 {
    get
  }
  public var status: ChatSDK.PollStatus {
    get
  }
  final public let messageId: Swift.Int64
  final public let data: ChatSDK.PollData?
  public var voterCount: Swift.Int64 {
    get
  }
  public var options: [ChatSDK.PollOption] {
    get
  }
  final public let createdBy: Swift.String?
  public var allowUserSuggestion: Swift.Bool {
    get
  }
  public var allowMultipleVotes: Swift.Bool {
    get
  }
  public var allowAnonymousVotes: Swift.Bool {
    get
  }
  public var votedPollOptionIds: [Swift.Int64]?
  required public init(from decoder: any Swift.Decoder) throws
  public class func create(params: ChatSDK.PollCreateParams, completionHandler: @escaping ChatSDK.PollHandler)
  @available(iOS 13.0, *)
  public class func create(params: ChatSDK.PollCreateParams) async throws -> Swift.Result<ChatSDK.Poll, ChatSDK.GIMError>
  public class func get(params: ChatSDK.PollRetrievalParams, completionHandler: @escaping ChatSDK.PollHandler)
  @available(iOS 13.0, *)
  public class func get(params: ChatSDK.PollRetrievalParams) async throws -> Swift.Result<ChatSDK.Poll, ChatSDK.GIMError>
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
extension ChatSDK.Poll {
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
}
public typealias GIMErrorHandler = ((_ error: ChatSDK.GIMError?) -> Swift.Void)
public typealias PushTriggerOptionHandler = ((_ pushTriggerOption: ChatSDK.PushTriggerOption, _ error: ChatSDK.GIMError?) -> Swift.Void)
@objc public class AppInfo : ObjectiveC.NSObject, Swift.Decodable {
  public var uploadSizeLimit: Swift.Int64 {
    get
  }
  public var useReaction: Swift.Bool {
    get
  }
  public var applicationAttributes: [Swift.String]? {
    get
  }
  public var useNativeWS: Swift.Bool {
    get
  }
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class BlockedUserListQueryParams : ObjectiveC.NSObject {
  final public var userIdsFilter: [Swift.String]
  final public var limit: Swift.UInt
  @objc override dynamic public init()
  convenience public init(builder: (ChatSDK.BlockedUserListQueryParams) -> Swift.Void)
  @objc deinit
}
extension ChatSDK.BlockedUserListQueryParams {
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
}
extension ChatSDK.BlockedUserListQueryParams : Foundation.NSCopying {
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
public protocol UserListQuery {
  var hasNext: Swift.Bool { get }
  var isLoading: Swift.Bool { get }
  func loadNextPage(completionHandler: @escaping ChatSDK.UserListHandler)
}
public enum MessageCollectionInitPolicy : Swift.Int {
  case cacheAndReplaceByApi
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public typealias GroupChannelPushTriggerOptionHandler = ((_ option: ChatSDK.GroupChannelPushTriggerOption, _ error: ChatSDK.GIMError?) -> Swift.Void)
public enum ChannelType : Swift.String, Swift.Codable {
  case open
  case group
  case none
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum MemberStateFilter : Swift.String, Swift.Codable {
  case all
  case joinedOnly
  case invitedOnly
  case invitedByFriend
  case invitedByNonFriend
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum PushTokenType : Swift.String, Swift.Codable {
  case none
  case GCM
  case FCM
  case APNS
  case APNSVoIP
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_hasMissingDesignatedInitializers final public class ScheduledMessageListQuery : ObjectiveC.NSObject {
  final public var hasNext: Swift.Bool {
    get
  }
  final public var isLoading: Swift.Bool {
    get
  }
  dynamic final public var limit: Swift.Int {
    get
  }
  dynamic final public var order: ChatSDK.ScheduledMessageListOrder {
    get
  }
  dynamic final public var reverse: Swift.Bool {
    get
  }
  dynamic final public var scheduledStatusOptions: ChatSDK.ScheduledStatusOptions {
    get
  }
  dynamic final public var messageTypeFilter: ChatSDK.MessageTypeFilter {
    get
  }
  final public func loadNextPage(completionHandler: @escaping ChatSDK.MessageListHandler)
  @available(iOS 13.0, *)
  final public func loadNextPage() async throws -> Swift.Result<[ChatSDK.BaseMessage], ChatSDK.GIMError>
  @objc deinit
}
extension ChatSDK.ScheduledMessageListQuery : Foundation.NSCopying {
  @objc dynamic final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@propertyWrapper public class Atomic<T> {
  public var wrappedValue: T {
    get
    set
  }
  public var projectedValue: ChatSDK.Atomic<T> {
    get
  }
  public init(wrappedValue: T)
  @objc deinit
}
@propertyWrapper public class SafeQueue<T> {
  public var wrappedValue: T {
    get
    set
  }
  public init(wrappedValue: T)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class GroupChannelTotalUnreadMessageCountParams : ObjectiveC.NSObject {
  public var channelCustomTypesFilter: [Swift.String]?
  @objc override dynamic public init()
  @objc deinit
}
@objc public class TotalScheduledMessageCountParams : ObjectiveC.NSObject {
  final public let channelURL: Swift.String
  public var scheduledStatusOptions: ChatSDK.ScheduledStatusOptions
  public var messageTypeFilter: ChatSDK.MessageTypeFilter
  public init(channelURL: Swift.String)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class PollUpdateEvent : ObjectiveC.NSObject, Swift.Codable {
  final public let poll: ChatSDK.Poll
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public typealias GIMResponseHandler = ((_ response: Any?, _ error: ChatSDK.GIMError?) -> Swift.Void)
public enum GroupChannelPublicChannelFilter : Swift.String, Swift.Codable {
  case all
  case `public`
  case `private`
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_hasMissingDesignatedInitializers public class GroupChannelListQuery : ObjectiveC.NSObject {
  public var hasNext: Swift.Bool {
    get
  }
  public var isLoading: Swift.Bool {
    get
  }
  public var limit: Swift.UInt {
    get
  }
  dynamic public var includeEmptyChannel: Swift.Bool {
    get
  }
  dynamic public var includeFrozenChannel: Swift.Bool {
    get
  }
  dynamic public var includeMetaData: Swift.Bool {
    get
  }
  dynamic public var queryType: ChatSDK.GroupChannelListQueryType {
    get
  }
  dynamic public var channelURLsFilter: [Swift.String]? {
    get
  }
  dynamic public var customTypeStartsWithFilter: Swift.String? {
    get
  }
  dynamic public var customTypesFilter: [Swift.String]? {
    get
  }
  dynamic public var nicknameContainsFilter: Swift.String? {
    get
  }
  dynamic public var nicknameStartsWithFilter: Swift.String? {
    get
  }
  dynamic public var userIdsIncludeFilter: [Swift.String]? {
    get
  }
  dynamic public var userIdsExactFilter: [Swift.String]? {
    get
  }
  dynamic public var channelNameStartsWithFilter: Swift.String? {
    get
  }
  dynamic public var channelNameContainsFilter: Swift.String? {
    get
  }
  dynamic public var unreadChannelFilter: ChatSDK.UnreadChannelFilter {
    get
  }
  dynamic public var metaDataOrderKeyFilter: Swift.String? {
    get
  }
  dynamic public var metaDataValueStartsWithFilter: Swift.String? {
    get
  }
  dynamic public var channelHiddenStateFilter: ChatSDK.ChannelHiddenStateFilter {
    get
  }
  dynamic public var order: ChatSDK.GroupChannelListOrder {
    get
  }
  public func loadNextPage(completionHandler: @escaping ChatSDK.GroupChannelListHandler)
  @available(iOS 13.0, *)
  public func loadNextPage() async throws -> Swift.Result<[ChatSDK.GroupChannel], ChatSDK.GIMError>
  @objc deinit
}
public enum UserListQueryType : Swift.Int, Swift.Codable {
  case allUsers
  case blockedUsers
  case openChannelParticipants
  case openChannelMutedUsers
  case openChannelBannedUsers
  case filteredUsers
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc final public class OGMetaData : ObjectiveC.NSObject, Swift.Codable {
  final public let title: Swift.String?
  final public let url: Swift.String?
  final public let desc: Swift.String?
  final public let defaultImage: ChatSDK.OGImage?
  public init(from decoder: any Swift.Decoder) throws
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
}
public enum UnreadChannelFilter : Swift.String, Swift.Codable {
  case all
  case unreadMessage
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol NetworkDelegate {
  func didReconnect()
}
public enum GroupChannelListOrder : Swift.String, Swift.Codable {
  case chronological
  case latestLastMessage
  case channelNameAlphabetical
  case channelMetaDataValueAlphabetical
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_hasMissingDesignatedInitializers public class GroupChannelCollection : ChatSDK.BaseCollection {
  public var channelList: [ChatSDK.GroupChannel] {
    get
  }
  public var hasNext: Swift.Bool {
    get
  }
  public var isLoading: Swift.Bool {
    get
  }
  public var query: ChatSDK.GroupChannelListQuery {
    get
  }
  weak public var delegate: (any ChatSDK.GroupChannelCollectionDelegate)?
  public var needMoreData: Swift.Bool {
    get
  }
  @objc deinit
  public func loadMore(completionHandler: @escaping ChatSDK.GroupChannelListHandler)
  @available(iOS 13.0, *)
  public func loadMore() async throws -> Swift.Result<[ChatSDK.GroupChannel], ChatSDK.GIMError>
  public func dispose()
}
extension ChatSDK.GroupChannelCollection : ChatSDK.ConnectionDelegate {
  dynamic public func didSucceedReconnection()
  dynamic public func didConnect(userId: Swift.String)
}
extension ChatSDK.GroupChannelCollection : ChatSDK.GroupChannelDelegate {
  public func channel(_ channel: ChatSDK.BaseChannel, didReceive message: ChatSDK.BaseMessage)
  public func channel(_ channel: ChatSDK.BaseChannel, didPending message: ChatSDK.BaseMessage)
  public func channel(_ channel: ChatSDK.BaseChannel, didFailure message: ChatSDK.BaseMessage)
  dynamic public func channel(_ channel: ChatSDK.BaseChannel, didUpdate message: ChatSDK.BaseMessage)
  dynamic public func channel(_ channel: ChatSDK.BaseChannel, didReceiveMention message: ChatSDK.BaseMessage)
  dynamic public func channelWasChanged(_ channel: ChatSDK.BaseChannel)
  dynamic public func channel(_ channel: ChatSDK.GroupChannel, didReceiveInvitation invitees: [ChatSDK.User]?, inviter: ChatSDK.User?)
  dynamic public func channel(_ channel: ChatSDK.GroupChannel, didDeclineInvitation invitee: ChatSDK.User, inviter: ChatSDK.User?)
  dynamic public func channelDidUpdateDeliveryStatus(_ channel: ChatSDK.GroupChannel)
  dynamic public func channelDidUpdateReadStatus(_ channel: ChatSDK.GroupChannel)
  dynamic public func channelDidChangeMemberCount(_ channels: [ChatSDK.GroupChannel])
  dynamic public func channel(_ channel: ChatSDK.BaseChannel, userWasMuted user: ChatSDK.RestrictedUser)
  dynamic public func channel(_ channel: ChatSDK.BaseChannel, userWasUnmuted user: ChatSDK.User)
  dynamic public func channelWasFrozen(_ channel: ChatSDK.BaseChannel)
  dynamic public func channelWasUnfrozen(_ channel: ChatSDK.BaseChannel)
  dynamic public func channelWasHidden(_ channel: ChatSDK.GroupChannel)
  dynamic public func channelDidUpdateOperators(_ channel: ChatSDK.BaseChannel)
  dynamic public func channel(_ channel: ChatSDK.GroupChannel, userDidLeave user: ChatSDK.User)
  dynamic public func channel(_ channel: ChatSDK.GroupChannel, userDidJoin user: ChatSDK.User)
  dynamic public func channel(_ channel: ChatSDK.BaseChannel, userWasBanned user: ChatSDK.RestrictedUser)
  dynamic public func channel(_ channel: ChatSDK.BaseChannel, userWasUnbanned user: ChatSDK.User)
  dynamic public func channelWasDeleted(_ channelURL: Swift.String, channelType: ChatSDK.ChannelType)
  dynamic public func channel(_ channel: ChatSDK.BaseChannel, createdMetaData: [Swift.String : Swift.String]?)
  dynamic public func channel(_ channel: ChatSDK.BaseChannel, updatedMetaData: [Swift.String : Swift.String]?)
  dynamic public func channel(_ channel: ChatSDK.BaseChannel, deletedMetaDataKeys: [Swift.String]?)
  dynamic public func channel(_ channel: ChatSDK.BaseChannel, createdMetaCounters: [Swift.String : Swift.Int]?)
  dynamic public func channel(_ channel: ChatSDK.BaseChannel, updatedMetaCounters: [Swift.String : Swift.Int]?)
  dynamic public func channel(_ channel: ChatSDK.BaseChannel, deletedMetaCountersKeys: [Swift.String]?)
  dynamic public func channelDidUpdatePinnedMessages(_ channel: ChatSDK.BaseChannel)
  dynamic public func channel(_ channel: ChatSDK.BaseChannel, messageWasDeleted messageId: Swift.Int64)
}
extension ChatSDK.GroupChannelCollection : ChatSDK.GIMUserEventDelegate {
  public func didUpdateUsers(_ users: [ChatSDK.User])
}
@objc @_inheritsConvenienceInitializers public class PollData : ObjectiveC.NSObject, Swift.Codable {
  public var text: Swift.String?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers public class ThreadInfoUpdateEvent : ObjectiveC.NSObject, Swift.Codable {
  final public let targetMessageId: Swift.Int64
  final public let channelURL: Swift.String
  final public let channelType: ChatSDK.ChannelType
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public typealias ChannelChangeLogsHandler = ((_ updatedChannel: [ChatSDK.GroupChannel]?, _ deletedChannelURLs: [Swift.String]?, _ hasMore: Swift.Bool, _ token: Swift.String?, _ error: ChatSDK.GIMError?) -> Swift.Void)
public enum GroupChannelListQuerySearchField {
  case memberNickname
  case channelName
  public static func == (a: ChatSDK.GroupChannelListQuerySearchField, b: ChatSDK.GroupChannelListQuerySearchField) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum PushTriggerOption : Swift.String, Swift.Codable {
  case all
  case off
  case mentionOnly
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension Swift.KeyedDecodingContainer {
  public func decode(_ type: [Any].Type, forKey key: Swift.KeyedDecodingContainer<K>.Key) throws -> [Any]
  public func decode(_ type: [Swift.String : Any].Type, forKey key: Swift.KeyedDecodingContainer<K>.Key) throws -> [Swift.String : Any]
  public func decodeIfPresent(_ type: [Any].Type, forKey key: Swift.KeyedDecodingContainer<K>.Key) throws -> [Any]?
  public func decodeIfPresent(_ type: [Swift.String : Any].Type, forKey key: Swift.KeyedDecodingContainer<K>.Key) throws -> [Swift.String : Any]?
}
extension Swift.KeyedEncodingContainer {
  public mutating func encode(_ value: [Swift.String : Any], forKey key: Swift.KeyedEncodingContainer<K>.Key) throws
  public mutating func encode(_ value: [Any], forKey key: Swift.KeyedEncodingContainer<K>.Key) throws
  public mutating func encodeIfPresent(_ value: [Swift.String : Any]?, forKey key: Swift.KeyedEncodingContainer<K>.Key) throws
  public mutating func encodeIfPresent(_ value: [Any]?, forKey key: Swift.KeyedEncodingContainer<K>.Key) throws
}
@objc @_inheritsConvenienceInitializers final public class BannedUserListQueryParams : ObjectiveC.NSObject {
  final public var limit: Swift.UInt
  @objc override dynamic public init()
  public init(builder: (ChatSDK.BannedUserListQueryParams) -> Swift.Void)
  @objc deinit
}
extension ChatSDK.BannedUserListQueryParams {
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
}
extension ChatSDK.BannedUserListQueryParams : Foundation.NSCopying {
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@objc @_inheritsConvenienceInitializers public class UserUpdateParams : ObjectiveC.NSObject, Swift.Encodable, ChatSDK.Serializable {
  public var nickname: Swift.String?
  public var profileImageURL: Swift.String?
  public var profileImageData: Foundation.Data?
  public var preferredLanguages: [Swift.String]?
  public var discoveryKeys: [Swift.String]?
  public var profileFile: Swift.String?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers public class User : ObjectiveC.NSObject, Swift.Identifiable, ChatSDK.Mappable, ChatSDK.Serializable {
  public typealias ID = Swift.String
  public var id: ChatSDK.User.ID {
    get
  }
  final public let userId: Swift.String
  public var nickname: Swift.String {
    get
  }
  public var profileURL: Swift.String? {
    get
  }
  public var originalProfileURL: Swift.String? {
    get
  }
  public var plainProfileImageURL: Swift.String? {
    get
  }
  public var lastSeenAt: Swift.Int64 {
    get
  }
  public var isBlockedByMe: Swift.Bool {
    get
  }
  public var isBlockingMe: Swift.Bool {
    get
  }
  public var metaData: [Swift.String : Swift.String]? {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
extension ChatSDK.User {
  dynamic public func createMetaData(_ metaData: [Swift.String : Swift.String], completionHandler: ChatSDK.MetaDataHandler?)
  @available(iOS 13.0, *)
  dynamic public func createMetaData(_ metaData: [Swift.String : Swift.String]) async throws -> Swift.Result<[Swift.String : Swift.String], ChatSDK.GIMError>
  dynamic public func updateMetaData(_ metaData: [Swift.String : Swift.String], completionHandler: ChatSDK.MetaDataHandler?)
  @available(iOS 13.0, *)
  dynamic public func updateMetaData(_ metaData: [Swift.String : Swift.String]) async throws -> Swift.Result<[Swift.String : Swift.String], ChatSDK.GIMError>
  dynamic public func deleteMetaData(key: Swift.String, completionHandler: ChatSDK.GIMErrorHandler?)
  @available(iOS 13.0, *)
  dynamic public func deleteMetaData(key: Swift.String) async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
  dynamic public func deleteAllMetaData(completionHandler: ChatSDK.GIMErrorHandler?)
  @available(iOS 13.0, *)
  dynamic public func deleteAllMetaData() async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
}
extension ChatSDK.User {
  public static func == (lhs: ChatSDK.User, rhs: ChatSDK.User) -> Swift.Bool
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
}
extension ChatSDK.User {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
}
public enum CoreError : Swift.Int, ChatSDK.GIMErrorCode {
  case unknownError
  case networkError
  case networkRoutingError
  case malformedData
  case requestFailed
  case fileUploadCancelFailed
  case fileUploadCanceled
  case fileUploadTimeout
  case fileSizeLimitExceeded
  case internalServerError
  public var code: Swift.Int {
    get
  }
  public var message: Swift.String {
    get
  }
  public func asGIMError(message: Swift.String?) -> ChatSDK.GIMError
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers public class MemberListQuery : ObjectiveC.NSObject {
  public var hasNext: Swift.Bool {
    get
  }
  public var isLoading: Swift.Bool {
    get
  }
  dynamic public var nicknameStartsWithFilter: Swift.String? {
    get
  }
  dynamic public var operatorFilter: ChatSDK.GroupChannelOperatorFilter {
    get
  }
  dynamic public var mutedMemberFilter: ChatSDK.GroupChannelMutedMemberFilter {
    get
  }
  dynamic public var memberStateFilter: ChatSDK.MemberStateFilter {
    get
  }
  dynamic public var order: ChatSDK.MemberListOrder {
    get
  }
  dynamic public var limit: Swift.UInt {
    get
  }
  public func loadNextPage(completionHandler: @escaping ChatSDK.MemberListHandler)
  @available(iOS 13.0, *)
  public func loadNextPage() async throws -> Swift.Result<[ChatSDK.Member], ChatSDK.GIMError>
  @objc deinit
}
extension ChatSDK.MemberListQuery : Foundation.NSCopying {
  @objc dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@objc @_hasMissingDesignatedInitializers public class PollDetails : ObjectiveC.NSObject, Swift.Codable {
  public var data: ChatSDK.PollData? {
    get
  }
  public var voterCount: Swift.Int {
    get
  }
  public var options: [ChatSDK.PollOption] {
    get
  }
  public var votedOptionIds: [Swift.Int] {
    get
  }
  final public let createdBy: Swift.String?
  final public let allowUserSuggestion: Swift.Bool
  final public let allowMultipleVotes: Swift.Bool
  final public let createdAt: Swift.Int64
  final public let updatedAt: Swift.Int64
  final public let closeAt: Swift.Int64
  public var status: ChatSDK.PollStatus {
    get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension ChatSDK.PollDetails {
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
}
public typealias BaseMessageHandler = ((_ message: ChatSDK.BaseMessage?, _ error: ChatSDK.GIMError?) -> Swift.Void)
@objc @_hasMissingDesignatedInitializers public class GroupChannel : ChatSDK.BaseChannel {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  public var lastMessage: ChatSDK.BaseMessage? {
    get
  }
  public var isSuper: Swift.Bool {
    get
  }
  public var isBroadcast: Swift.Bool {
    get
  }
  public var isExclusive: Swift.Bool {
    get
  }
  public var isAccessCodeRequired: Swift.Bool {
    get
  }
  public var isDistinct: Swift.Bool {
    get
  }
  public var isDiscoverable: Swift.Bool {
    get
  }
  public var unreadMessageCount: Swift.UInt {
    get
  }
  public var unreadMentionCount: Swift.UInt {
    get
  }
  public var members: [ChatSDK.Member] {
    get
  }
  public var memberCount: Swift.UInt {
    get
  }
  public var joinedMemberCount: Swift.UInt {
    get
  }
  public var joinedAt: Swift.Int64 {
    get
  }
  public var myPushTriggerOption: ChatSDK.GroupChannelPushTriggerOption {
    get
  }
  public var isHidden: Swift.Bool {
    get
  }
  public var myMemberState: ChatSDK.MemberState {
    get
  }
  public var myRole: ChatSDK.Role {
    get
  }
  public var myMutedState: ChatSDK.MutedState {
    get
  }
  public var myCountPreference: ChatSDK.CountPreference {
    get
  }
  public var invitedAt: Swift.Int64 {
    get
  }
  public var hiddenState: ChatSDK.GroupChannelHiddenState {
    get
  }
  public var myLastRead: Swift.Int64 {
    get
  }
  public var messageOffsetTimestamp: Swift.Int64 {
    get
  }
  public var messageSurvivalSeconds: Swift.Int {
    get
  }
  public var pendingMessages: [ChatSDK.BaseMessage] {
    get
  }
  public var failedMessages: [ChatSDK.BaseMessage] {
    get
  }
  override public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  public func hasMember(_ userId: Swift.String) -> Swift.Bool
  public func getMember(_ userId: Swift.String) -> ChatSDK.Member?
  public func getInviter() -> ChatSDK.User?
  public class func compare(channelA: ChatSDK.GroupChannel, channelB: ChatSDK.GroupChannel, order: ChatSDK.GroupChannelListOrder) -> Swift.Bool
  dynamic public func refresh(completionHandler: ChatSDK.GIMErrorHandler?)
  @available(iOS 13.0, *)
  dynamic public func refresh() async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
  dynamic public class func createChannel(params: ChatSDK.GroupChannelCreateParams, completionHandler: ChatSDK.GroupChannelHandler?)
  @available(iOS 13.0, *)
  dynamic public class func createChannel(params: ChatSDK.GroupChannelCreateParams) async throws -> Swift.Result<ChatSDK.GroupChannel, ChatSDK.GIMError>
  dynamic public class func createChannel(params: ChatSDK.GroupChannelCreateParams, progressHandler: ChatSDK.ProgressHandler?, completionHandler: ChatSDK.GroupChannelHandler?)
  @available(iOS 13.0, *)
  dynamic public class func createChannel(params: ChatSDK.GroupChannelCreateParams, progressHandler: ChatSDK.ProgressHandler?) async throws -> Swift.Result<ChatSDK.GroupChannel, ChatSDK.GIMError>
  dynamic public class func createDistinctChannelIfNotExist(params: ChatSDK.GroupChannelCreateParams, completionHandler: @escaping ChatSDK.DistinctGroupChannelHandler)
  @available(iOS 13.0, *)
  dynamic public class func createDistinctChannelIfNotExist(params: ChatSDK.GroupChannelCreateParams) async throws -> Swift.Result<(channel: ChatSDK.GroupChannel, isCreate: Swift.Bool), ChatSDK.GIMError>
  dynamic public class func createDistinctChannelIfNotExist(params: ChatSDK.GroupChannelCreateParams, progressHandler: ChatSDK.ProgressHandler?, completionHandler: @escaping ChatSDK.DistinctGroupChannelHandler)
  @available(iOS 13.0, *)
  dynamic public class func createDistinctChannelIfNotExist(params: ChatSDK.GroupChannelCreateParams, progressHandler: ChatSDK.ProgressHandler?) async throws -> Swift.Result<(channel: ChatSDK.GroupChannel, isCreate: Swift.Bool), ChatSDK.GIMError>
  dynamic public func update(params: ChatSDK.GroupChannelUpdateParams, completionHandler: @escaping ChatSDK.GroupChannelHandler)
  @available(iOS 13.0, *)
  dynamic public func update(params: ChatSDK.GroupChannelUpdateParams) async throws -> Swift.Result<ChatSDK.GroupChannel, ChatSDK.GIMError>
  dynamic public func update(params: ChatSDK.GroupChannelUpdateParams, progressHandler: ChatSDK.ProgressHandler?, completionHandler: @escaping ChatSDK.GroupChannelHandler)
  @available(iOS 13.0, *)
  dynamic public func update(params: ChatSDK.GroupChannelUpdateParams, progressHandler: ChatSDK.ProgressHandler?) async throws -> Swift.Result<ChatSDK.GroupChannel, ChatSDK.GIMError>
  dynamic public class func getChannel(url: Swift.String, completionHandler: ChatSDK.GroupChannelHandler?)
  dynamic public func getChannel(completionHandler: ChatSDK.GroupChannelHandler?)
  @available(iOS 13.0, *)
  dynamic public class func getChannel(url: Swift.String) async throws -> Swift.Result<ChatSDK.GroupChannel, ChatSDK.GIMError>
  @available(iOS 13.0, *)
  dynamic public func getChannel() async throws -> Swift.Result<ChatSDK.GroupChannel, ChatSDK.GIMError>
  dynamic public class func getChannelFromCache(url: Swift.String) -> ChatSDK.GroupChannel?
  public func createMessageSync()
  @objc deinit
}
extension ChatSDK.GroupChannel {
  dynamic public func resetMyHistory(completionHandler: ChatSDK.GIMErrorHandler?)
  @available(iOS 13.0, *)
  dynamic public func resetMyHistory() async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
  dynamic public func setMyPushTriggerOption(_ option: ChatSDK.GroupChannelPushTriggerOption, completionHandler: ChatSDK.GIMErrorHandler?)
  @available(iOS 13.0, *)
  dynamic public func setMyPushTriggerOption(_ option: ChatSDK.GroupChannelPushTriggerOption) async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
  dynamic public func getMyPushTriggerOption(completionHandler: @escaping ChatSDK.GroupChannelPushTriggerOptionHandler)
  @available(iOS 13.0, *)
  dynamic public func getMyPushTriggerOption() async throws -> Swift.Result<ChatSDK.GroupChannelPushTriggerOption, ChatSDK.GIMError>
  dynamic public func setMyCountPreference(_ myCountPreference: ChatSDK.CountPreference, completionHandler: ChatSDK.GIMErrorHandler?)
  @available(iOS 13.0, *)
  dynamic public func setMyCountPreference(_ myCountPreference: ChatSDK.CountPreference) async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
}
extension ChatSDK.GroupChannel {
  dynamic public func getUnreadMemberCount(_ message: ChatSDK.BaseMessage) -> Swift.Int
  public func getReadMemberCount(_ message: ChatSDK.BaseMessage) -> Swift.Int
  dynamic public func getReadMembers(message: ChatSDK.BaseMessage, includeAllMembers: Swift.Bool) -> [ChatSDK.Member]
  dynamic public func getUnreadMembers(message: ChatSDK.BaseMessage, includeAllMembers: Swift.Bool) -> [ChatSDK.Member]
  dynamic public func getUndeliveredMemberCount(_ message: ChatSDK.BaseMessage) -> Swift.Int
  dynamic public func getReadStatus(includeAllMembers: Swift.Bool) -> [Swift.String : [Swift.String : Any]]
  dynamic public func markAsRead(completionHandler: ChatSDK.GIMErrorHandler?)
  @available(iOS 13.0, *)
  dynamic public func markAsRead() async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
}
extension ChatSDK.GroupChannel {
  dynamic public class func createMyGroupChannelListQuery() -> ChatSDK.GroupChannelListQuery
  dynamic public class func createMyGroupChannelListQuery(paramsBuilder: (ChatSDK.GroupChannelListQueryParams) -> Swift.Void) -> ChatSDK.GroupChannelListQuery
  dynamic public class func createMyGroupChannelListQuery(params: ChatSDK.GroupChannelListQueryParams) -> ChatSDK.GroupChannelListQuery
}
extension ChatSDK.GroupChannel {
  dynamic public class func createMemberListQuery(channelURL: Swift.String) -> ChatSDK.MemberListQuery
  dynamic public class func createMemberListQuery(channelURL: Swift.String, paramsBuilder: (ChatSDK.MemberListQueryParams) -> Swift.Void) -> ChatSDK.MemberListQuery
  dynamic public func createMemberListQuery() -> ChatSDK.MemberListQuery?
  dynamic public func createMemberListQuery(paramsBuilder: (ChatSDK.MemberListQueryParams) -> Swift.Void) -> ChatSDK.MemberListQuery?
  dynamic public func createMemberListQuery(params: ChatSDK.MemberListQueryParams) -> ChatSDK.MemberListQuery?
}
extension ChatSDK.GroupChannel {
  dynamic public func createScheduledUserMessage(params: ChatSDK.ScheduledUserMessageCreateParams, completionHandler: ChatSDK.UserMessageHandler?) -> ChatSDK.UserMessage?
  dynamic public func updateScheduledUserMessage(scheduledMessageId: Swift.Int64, params: ChatSDK.ScheduledUserMessageUpdateParams, completionHandler: ChatSDK.UserMessageHandler?)
  @available(iOS 13.0, *)
  dynamic public func updateScheduledUserMessage(scheduledMessageId: Swift.Int64, params: ChatSDK.ScheduledUserMessageUpdateParams) async throws -> Swift.Result<ChatSDK.UserMessage, ChatSDK.GIMError>
  dynamic public func sendScheduledMessageNow(scheduledMessageId: Swift.Int64, completionHandler: @escaping ChatSDK.GIMErrorHandler)
  @available(iOS 13.0, *)
  dynamic public func sendScheduledMessageNow(scheduledMessageId: Swift.Int64) async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
  dynamic public func cancelScheduledMessage(scheduledMessageId: Swift.Int64, completionHandler: @escaping ChatSDK.GIMErrorHandler)
  @available(iOS 13.0, *)
  dynamic public func cancelScheduledMessage(scheduledMessageId: Swift.Int64) async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
}
extension ChatSDK.GroupChannel {
  dynamic public func inviteUser(_ user: ChatSDK.User, completionHandler: ChatSDK.GIMErrorHandler?)
  @available(iOS 13.0, *)
  dynamic public func inviteUser(_ user: ChatSDK.User) async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
  dynamic public func inviteUserId(_ userId: Swift.String, completionHandler: ChatSDK.GIMErrorHandler?)
  @available(iOS 13.0, *)
  dynamic public func inviteUserId(_ userId: Swift.String) async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
  dynamic public func inviteUsers(_ users: [ChatSDK.User], completionHandler: ChatSDK.GIMErrorHandler?)
  @available(iOS 13.0, *)
  dynamic public func inviteUsers(_ users: [ChatSDK.User]) async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
  dynamic public func inviteUserIds(_ userIds: [Swift.String], completionHandler: ChatSDK.GIMErrorHandler?)
  @available(iOS 13.0, *)
  dynamic public func inviteUserIds(_ userIds: [Swift.String]) async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
  dynamic public func acceptInvitation(completionHandler: ChatSDK.GIMErrorHandler?)
  @available(iOS 13.0, *)
  dynamic public func acceptInvitation() async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
  dynamic public func acceptInvitation(accessCode: Swift.String?, completionHandler: ChatSDK.GIMErrorHandler?)
  @available(iOS 13.0, *)
  dynamic public func acceptInvitation(accessCode: Swift.String?) async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
  dynamic public func declineInvitation(completionHandler: ChatSDK.GIMErrorHandler?)
  @available(iOS 13.0, *)
  dynamic public func declineInvitation() async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
  dynamic public func join(completionHandler: ChatSDK.GIMErrorHandler?)
  @available(iOS 13.0, *)
  dynamic public func join() async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
  dynamic public func join(accessCode: Swift.String?, completionHandler: ChatSDK.GIMErrorHandler?)
  @available(iOS 13.0, *)
  dynamic public func join(accessCode: Swift.String?) async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
  dynamic public func leave(completionHandler: ChatSDK.GIMErrorHandler?)
  @available(iOS 13.0, *)
  dynamic public func leave() async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
  dynamic public func leave(shouldRemoveOperatorStatus: Swift.Bool, completionHandler: ChatSDK.GIMErrorHandler?)
  @available(iOS 13.0, *)
  dynamic public func leave(shouldRemoveOperatorStatus: Swift.Bool) async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
  dynamic public func notifyScreenshotWasTaken(completionHandler: ChatSDK.GIMErrorHandler?)
}
extension ChatSDK.GroupChannel {
  dynamic public func hide(hidePreviousMessages: Swift.Bool, completionHandler: ChatSDK.GIMErrorHandler?)
  @available(iOS 13.0, *)
  dynamic public func hide(hidePreviousMessages: Swift.Bool) async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
  dynamic public func hide(hidePreviousMessages: Swift.Bool, allowAutoUnhide: Swift.Bool, completionHandler: ChatSDK.GIMErrorHandler?)
  @available(iOS 13.0, *)
  dynamic public func hide(hidePreviousMessages: Swift.Bool, allowAutoUnhide: Swift.Bool) async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
  dynamic public func unhide(completionHandler: ChatSDK.GIMErrorHandler?)
  @available(iOS 13.0, *)
  dynamic public func unhide() async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
}
extension ChatSDK.GroupChannel {
  dynamic public func startTyping()
  dynamic public func endTyping()
  dynamic public func isTyping() -> Swift.Bool
  dynamic public func getTypingUsers() -> [ChatSDK.User]?
}
@objc @_inheritsConvenienceInitializers final public class OpenChannelListQueryParams : ObjectiveC.NSObject {
  final public var includeFrozenChannel: Swift.Bool
  final public var includeMetaData: Swift.Bool
  final public var channelURLFilter: Swift.String?
  final public var channelNameFilter: Swift.String?
  final public var customTypeFilter: Swift.String?
  final public var limit: Swift.UInt
  @objc override dynamic public init()
  convenience public init(builder: (ChatSDK.OpenChannelListQueryParams) -> Swift.Void)
  @objc deinit
}
extension ChatSDK.OpenChannelListQueryParams {
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
}
public typealias GroupChannelHandler = ((_ channel: ChatSDK.GroupChannel?, _ error: ChatSDK.GIMError?) -> Swift.Void)
@objc @_hasMissingDesignatedInitializers public class Reaction : ObjectiveC.NSObject, ChatSDK.Mappable {
  final public let key: Swift.String
  public var getUserIds: [Swift.String] {
    get
  }
  public var updatedAt: Swift.Int64 {
    get
  }
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc @_inheritsConvenienceInitializers public class GIMChat : ObjectiveC.NSObject {
  public class func setSessionDelegate(_ delegate: any ChatSDK.SessionDelegate)
  public class func removeSessionDelegate()
  public class func setCompletionHandlerDelegateQueue(_ queue: Dispatch.DispatchQueue)
  public class func performCompletionHandlerDelegateQueue(_ block: (() -> Swift.Void)?)
  public class func getLastConnectedAt() -> Swift.Int64
  @objc override dynamic public init()
  @objc deinit
}
extension ChatSDK.GIMChat {
  public class var isInitialized: Swift.Bool {
    get
  }
  public class func getSDKVersion() -> Swift.String
  public class func getApplicationId() -> Swift.String?
  public class func setAppVersion(version: Swift.String?)
  @discardableResult
  public class func initialize(params: ChatSDK.InitParams, migrationStartHandler: ChatSDK.VoidHandler? = nil, completionHandler: ChatSDK.GIMErrorHandler? = nil) -> Swift.Bool
  public class func initializeSynchronously(params: ChatSDK.InitParams) -> ChatSDK.GIMError?
  public class func setAppGroup(_ appGroup: Swift.String)
  public class func getLogLevel() -> ChatSDK.LogLevel
  public class func setLogLevel(_ logLevel: ChatSDK.LogLevel)
  public class func setNetworkAwarenessReconnection(_ isOn: Swift.Bool)
  public class func getUserAgent() -> Swift.String
  public class func addExtension(_ key: Swift.String, version: Swift.String)
  public class func ekey() -> Swift.String?
  public class func getAppInfo() -> ChatSDK.AppInfo?
}
extension ChatSDK.GIMChat {
  public class func connect(userId: Swift.String, completionHandler: ChatSDK.UserHandler? = nil)
  public class func connect(userId: Swift.String, authToken: Swift.String?, completionHandler: ChatSDK.UserHandler? = nil)
  public class func connect(userId: Swift.String, authToken: Swift.String?, apiHost: Swift.String?, wsHost: Swift.String?, completionHandler: ChatSDK.UserHandler? = nil)
  @available(iOS 13.0, *)
  public class func connect(userId: Swift.String, authToken: Swift.String?, apiHost: Swift.String?, wsHost: Swift.String?) async throws -> Swift.Result<ChatSDK.User, ChatSDK.GIMError>
  public class func disconnect(completionHandler: ChatSDK.VoidHandler? = nil)
  @available(iOS 13.0, *)
  public class func disconnect() async throws -> ChatSDK.GIMError?
  public class func disconnectWebSocket(completionHandler: ChatSDK.VoidHandler? = nil)
  @available(iOS 13.0, *)
  public class func disconnectWebSocket() async throws -> ChatSDK.GIMError?
  public class func reconnect() -> Swift.Bool
  public class func getConnectState() -> ChatSDK.GIMWebSocketConnectionState
  public class func addConnectionDelegate(_ delegate: any ChatSDK.ConnectionDelegate, identifier: Swift.String)
  public class func removeConnectionDelegate(forIdentifier identifier: Swift.String)
  public class func connectionDelegate(forIdentifier identifier: Swift.String) -> (any ChatSDK.ConnectionDelegate)?
  public class func removeAllConnectionDelegates()
}
extension ChatSDK.GIMChat {
  public class func setChannelInvitationPreference(autoAccept: Swift.Bool, completionHandler: ChatSDK.GIMErrorHandler? = nil)
  @available(iOS 13.0, *)
  public class func setChannelInvitationPreference(autoAccept: Swift.Bool) async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
  public class func getChannelInvitationPreferenceAutoAccept(completionHandler: ((_ autoAccept: Swift.Bool, _ error: ChatSDK.GIMError?) -> Swift.Void)? = nil)
  @available(iOS 13.0, *)
  public class func getChannelInvitationPreferenceAutoAccept() async throws -> Swift.Result<Swift.Bool, ChatSDK.GIMError>
  public class func createGroupChannelCollection(query: ChatSDK.GroupChannelListQuery) -> ChatSDK.GroupChannelCollection
  public class func getTotalUnreadChannelCount(completionHandler: @escaping ChatSDK.CountHandler)
  @available(iOS 13.0, *)
  public class func getTotalUnreadChannelCount() async throws -> Swift.Result<Swift.Int, ChatSDK.GIMError>
  public class func getTotalUnreadChannelCount(params: ChatSDK.GroupChannelTotalUnreadChannelCountParams, completionHandler: @escaping ChatSDK.CountHandler)
  public class func joinChannel(channelURL: Swift.String, accessCode: Swift.String? = nil, completionHandler: ChatSDK.GIMErrorHandler? = nil)
  public class func addChannelDelegate(_ delegate: any ChatSDK.BaseChannelDelegate, identifier: Swift.String)
  public class func removeChannelDelegate(forIdentifier identifier: Swift.String)
  public class func channelDelegate(forIdentifier identifier: Swift.String) -> (any ChatSDK.BaseChannelDelegate)?
  public class func removeAllChannelDelegates()
}
extension ChatSDK.GIMChat {
  public class func createMessageCollection(channel: ChatSDK.GroupChannel, startingPoint: Swift.Int64, params: ChatSDK.MessageListParams) -> ChatSDK.MessageCollection
  public class func getTotalUnreadMessageCount(completionHandler: @escaping ChatSDK.CountHandler)
  @available(iOS 13.0, *)
  public class func getTotalUnreadMessageCount() async throws -> Swift.Result<Swift.Int, ChatSDK.GIMError>
  public class func getTotalUnreadMessageCount(params: ChatSDK.GroupChannelTotalUnreadMessageCountParams, completionHandler: @escaping ChatSDK.CountHandler)
  @available(iOS 13.0, *)
  public class func getTotalUnreadMessageCount(params: ChatSDK.GroupChannelTotalUnreadMessageCountParams) async throws -> Swift.Result<Swift.Int, ChatSDK.GIMError>
  public class func createMessageSearchQuery(builder: (ChatSDK.MessageSearchQueryParams) -> Swift.Void) -> ChatSDK.MessageSearchQuery
  public class func createMessageSearchQuery(params: ChatSDK.MessageSearchQueryParams) -> ChatSDK.MessageSearchQuery
  public class func getSubscribedTotalUnreadMessageCount() -> Swift.Int
  public class func getSubscribedCustomTypeTotalUnreadMessageCount() -> Swift.Int
  public class func getSubscribedCustomTypeUnreadMessageCount(customType: Swift.String) -> Swift.Int
}
extension ChatSDK.GIMChat {
  public class func getTotalScheduledMessageCount(params: ChatSDK.TotalScheduledMessageCountParams, completionHandler: @escaping ChatSDK.CountHandler)
  @available(iOS 13.0, *)
  public class func getTotalScheduledMessageCount(params: ChatSDK.TotalScheduledMessageCountParams) async throws -> Swift.Result<Swift.Int, ChatSDK.GIMError>
  public class func createScheduledMessageListQuery(channelURL: Swift.String?) -> ChatSDK.ScheduledMessageListQuery
  public class func createScheduledMessageListQuery(channelURL: Swift.String?, paramsBuilder: (ChatSDK.ScheduledMessageListQueryParams) -> Swift.Void) -> ChatSDK.ScheduledMessageListQuery
  public class func createScheduledMessageListQuery(channelURL: Swift.String?, params: ChatSDK.ScheduledMessageListQueryParams) -> ChatSDK.ScheduledMessageListQuery
}
extension ChatSDK.GIMChat {
  public class func getCurrentUser() -> ChatSDK.User?
  public class func updateCurrentUserInfo(params: ChatSDK.UserUpdateParams, progressHandler: ChatSDK.ProgressHandler? = nil, completionHandler: ChatSDK.GIMErrorHandler? = nil)
  public class func uploadAvatarUser(params: ChatSDK.UserUpdateParams, progressHandler: ChatSDK.ProgressHandler? = nil, completionHandler: ChatSDK.GIMErrorHandler? = nil)
  @available(iOS 13.0, *)
  public class func updateCurrentUserInfo(params: ChatSDK.UserUpdateParams, progressHandler: ChatSDK.ProgressHandler? = nil) async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
  public class func updateCurrentUserInfo(preferredLanguages: [Swift.String], completionHandler: ChatSDK.GIMErrorHandler? = nil)
  @available(iOS 13.0, *)
  public class func updateCurrentUserInfo(preferredLanguages: [Swift.String]) async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
}
extension ChatSDK.GIMChat {
  public class func blockUserId(_ userId: Swift.String, completionHandler: ChatSDK.UserHandler? = nil)
  @available(iOS 13.0, *)
  public class func blockUserId(_ userId: Swift.String) async throws -> Swift.Result<ChatSDK.User, ChatSDK.GIMError>
  public class func blockUser(_ user: ChatSDK.User, completionHandler: ChatSDK.UserHandler? = nil)
  @available(iOS 13.0, *)
  public class func blockUser(_ user: ChatSDK.User) async throws -> Swift.Result<ChatSDK.User, ChatSDK.GIMError>
  public class func unblockUserId(_ userId: Swift.String, completionHandler: ChatSDK.GIMErrorHandler? = nil)
  @available(iOS 13.0, *)
  public class func unblockUserId(_ userId: Swift.String) async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
  public class func unblockUser(_ user: ChatSDK.User, completionHandler: ChatSDK.GIMErrorHandler? = nil)
  @available(iOS 13.0, *)
  public class func unblockUser(_ user: ChatSDK.User) async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
  public class func createBlockedUserListQuery() -> ChatSDK.BlockedUserListQuery
  public class func createBlockedUserListQuery(paramsBuilder: (ChatSDK.BlockedUserListQueryParams) -> Swift.Void) -> ChatSDK.BlockedUserListQuery
  public class func createBlockedUserListQuery(params: ChatSDK.BlockedUserListQueryParams) -> ChatSDK.BlockedUserListQuery
}
extension ChatSDK.GIMChat {
  public class func createApplicationUserListQuery() -> ChatSDK.ApplicationUserListQuery
  public class func createApplicationUserListQuery(paramsBuilder: (ChatSDK.ApplicationUserListQueryParams) -> Swift.Void) -> ChatSDK.ApplicationUserListQuery
  public class func createApplicationUserListQuery(params: ChatSDK.ApplicationUserListQueryParams) -> ChatSDK.ApplicationUserListQuery
  public class func userEventDelegate(forIdentifier identifier: Swift.String) -> (any ChatSDK.GIMUserEventDelegate)?
  public class func addUserEventDelegate(_ delegate: any ChatSDK.GIMUserEventDelegate, identifier: Swift.String)
  public class func removeUserEventDelegate(forIdentifier identifier: Swift.String)
  public class func removeAllUserEventDelegates()
}
extension ChatSDK.GIMChat {
  public class func getPendingPushToken() -> Foundation.Data?
  public class func registerDevicePushToken(_ devToken: Foundation.Data, unique: Swift.Bool, completionHandler: ((_ registrationStatus: ChatSDK.PushTokenRegistrationStatus, _ error: ChatSDK.GIMError?) -> Swift.Void)? = nil)
  @available(iOS 13.0, *)
  public class func registerDevicePushToken(_ devToken: Foundation.Data, unique: Swift.Bool) async throws -> Swift.Result<ChatSDK.PushTokenRegistrationStatus, ChatSDK.GIMError>
  public class func unregisterPushToken(_ devToken: Foundation.Data, completionHandler: ((_ response: [Swift.AnyHashable : Any]?, _ error: ChatSDK.GIMError?) -> Swift.Void)? = nil)
  @available(iOS 13.0, *)
  public class func unregisterPushToken(_ devToken: Foundation.Data) async throws -> Swift.Result<[Swift.AnyHashable : Any], ChatSDK.GIMError>
  public class func unregisterAllPushToken(completionHandler: ((_ response: [Swift.AnyHashable : Any]?, _ error: ChatSDK.GIMError?) -> Swift.Void)? = nil)
  @available(iOS 13.0, *)
  public class func unregisterAllPushToken() async throws -> Swift.Result<[Swift.AnyHashable : Any], ChatSDK.GIMError>
  public class func getMyPushTokens(token: Swift.String?, pushTokenType: ChatSDK.PushTokenType, completionHandler: @escaping ChatSDK.GetPushTokensHandler)
  @available(iOS 13.0, *)
  public class func getMyPushTokens(token: Swift.String?, pushTokenType: ChatSDK.PushTokenType) async throws -> Swift.Result<ChatSDK.PushTokens, ChatSDK.GIMError>
  public class func setDoNotDisturb(enable: Swift.Bool, startHour: Swift.Int32, startMin: Swift.Int32, endHour: Swift.Int32, endMin: Swift.Int32, timezone: Swift.String, completionHandler: ChatSDK.GIMErrorHandler? = nil)
  @available(iOS 13.0, *)
  public class func setDoNotDisturb(enable: Swift.Bool, startHour: Swift.Int32, startMin: Swift.Int32, endHour: Swift.Int32, endMin: Swift.Int32, timezone: Swift.String) async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
  public class func getDoNotDisturb(completionHandler: ((_ enabled: Swift.Bool, _ startHour: Swift.Int, _ startMin: Swift.Int, _ endHour: Swift.Int, _ endMin: Swift.Int, _ timezone: Swift.String, _ error: ChatSDK.GIMError?) -> Swift.Void)? = nil)
  @available(iOS 13.0, *)
  public class func getDoNotDisturb() async throws -> Swift.Result<(enabled: Swift.Bool, startHour: Swift.Int, startMin: Swift.Int, endHour: Swift.Int, endMin: Swift.Int, timezone: Swift.String), ChatSDK.GIMError>
  public class func setSnoozePeriod(enabled: Swift.Bool, startTimestamp: Swift.Int64, endTimestamp: Swift.Int64, timezone: Swift.String, completionHandler: ChatSDK.GIMErrorHandler? = nil)
  @available(iOS 13.0, *)
  public class func setSnoozePeriod(enabled: Swift.Bool, startTimestamp: Swift.Int64, endTimestamp: Swift.Int64, timezone: Swift.String) async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
  public class func getSnoozePeriod(_ completionHandler: @escaping ChatSDK.SnoozePeriodHandler)
  @available(iOS 13.0, *)
  public class func getSnoozePeriod() async throws -> Swift.Result<ChatSDK.SnoozePeriod, ChatSDK.GIMError>
  public class func setPushTriggerOption(_ pushTriggerOption: ChatSDK.PushTriggerOption, completionHandler: ChatSDK.GIMErrorHandler? = nil)
  @available(iOS 13.0, *)
  public class func setPushTriggerOption(_ pushTriggerOption: ChatSDK.PushTriggerOption) async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
  public class func getPushTriggerOption(completionHandler: @escaping ChatSDK.PushTriggerOptionHandler)
  @available(iOS 13.0, *)
  public class func getPushTriggerOption() async throws -> Swift.Result<ChatSDK.PushTriggerOption, ChatSDK.GIMError>
  public class func setPushSound(_ sound: Swift.String, completionHandler: ChatSDK.GIMErrorHandler? = nil)
  @available(iOS 13.0, *)
  public class func setPushSound(_ sound: Swift.String) async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
  public class func getPushSound(completionHandler: ((_ pushSound: Swift.String?, _ error: ChatSDK.GIMError?) -> Swift.Void)? = nil)
  @available(iOS 13.0, *)
  public class func getPushSound() async throws -> Swift.Result<Swift.String, ChatSDK.GIMError>
  public class func setPushTemplate(_ template: ChatSDK.PushTemplate, completionHandler: ChatSDK.GIMErrorHandler? = nil)
  @available(iOS 13.0, *)
  public class func setPushTemplate(_ template: ChatSDK.PushTemplate) async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
  public class func getPushTemplate(completionHandler: ((_ pushTemplate: ChatSDK.PushTemplate, _ error: ChatSDK.GIMError?) -> Swift.Void)? = nil)
  @available(iOS 13.0, *)
  public class func getPushTemplate() async throws -> Swift.Result<ChatSDK.PushTemplate, ChatSDK.GIMError>
}
extension ChatSDK.GIMChat {
  public class func clearCachedData(completionHandler: ChatSDK.GIMErrorHandler?)
  public class func clearCachedMessages(channelURL: Swift.String, completionHandler: ChatSDK.GIMErrorHandler?)
  public class func getCachedDataSize() -> Swift.Int
  public static var isLocalCachingEnabled: Swift.Bool {
    get
  }
  public static func syncCacheData()
}
public typealias OpenChannelObserverDelegate = ChatSDK.BaseChannelDelegate & ChatSDK.ConnectionDelegate & ChatSDK.GIMUserEventDelegate
public typealias OpenMessageObserverDelegate = ChatSDK.ConnectionDelegate & ChatSDK.OpenChannelDelegate
extension ChatSDK.GIMChat {
  public static func startOpenChannelObserve(delegate: any ChatSDK.BaseChannelDelegate & ChatSDK.ConnectionDelegate & ChatSDK.GIMUserEventDelegate, channelIdentifier: Swift.String)
  public static func stopOpenChannelObserve(channelIdentifier: Swift.String)
  public static func startMessageObserve(delegate: any ChatSDK.ConnectionDelegate & ChatSDK.OpenChannelDelegate, channelIdentifier: Swift.String)
  public static func stopMessageObserve(channelIdentifier: Swift.String)
}
@objc public class MessageContext : ObjectiveC.NSObject {
  public var source: ChatSDK.CollectionEventSource {
    get
  }
  public var sendingStatus: ChatSDK.MessageSendingStatus {
    get
  }
  public var fromEvent: Swift.Bool {
    get
  }
  public init(source: ChatSDK.CollectionEventSource, sendingStatus: ChatSDK.MessageSendingStatus)
  @objc deinit
}
public typealias MemberListHandler = (_ members: [ChatSDK.Member]?, _ error: ChatSDK.GIMError?) -> Swift.Void
@objc @_inheritsConvenienceInitializers public class PollOptionRetrievalParams : ObjectiveC.NSObject {
  public var pollId: Swift.Int64
  public var pollOptionId: Swift.Int64
  public var channelType: ChatSDK.ChannelType
  public var channelURL: Swift.String
  @objc override dynamic public init()
  convenience public init(builder: (ChatSDK.PollOptionRetrievalParams) -> Swift.Void)
  @objc deinit
}
extension ChatSDK.PollOptionRetrievalParams : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc @_hasMissingDesignatedInitializers public class BannedUserListQuery : ObjectiveC.NSObject, ChatSDK.RestrictedUserListQuery {
  public var hasNext: Swift.Bool {
    get
  }
  public var isLoading: Swift.Bool {
    get
  }
  public func loadNextPage(completionHandler: @escaping ChatSDK.RestrictedUserListHandler)
  @available(iOS 13.0, *)
  public func loadNextPage() async throws -> Swift.Result<[ChatSDK.RestrictedUser], ChatSDK.GIMError>
  public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
extension ChatSDK.BannedUserListQuery {
  dynamic public var limit: Swift.UInt {
    get
  }
}
public enum GroupChannelOperatorFilter : Swift.String, Swift.Codable {
  case all
  case `operator`
  case nonOperator
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_hasMissingDesignatedInitializers public class FileMessageCreateParams : ChatSDK.BaseMessageCreateParams {
  public var file: Foundation.Data? {
    get
  }
  public var fileURL: Swift.String? {
    get
  }
  public var thumbnailSizes: [ChatSDK.ThumbnailSize]?
  public var fileName: Swift.String?
  public var mimeType: Swift.String?
  public var fileSize: Swift.UInt
  public init(file: Foundation.Data)
  public init(fileURL: Swift.String)
  @objc override dynamic public init()
  override public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
public typealias MessageRequestIdsHandler = ((_ requestIds: [Swift.String]?, _ error: ChatSDK.GIMError?) -> Swift.Void)
@objc @_inheritsConvenienceInitializers public class MessageSearchQueryParams : ObjectiveC.NSObject, Swift.Codable {
  public var keyword: Swift.String?
  public var channelURL: Swift.String?
  public var channelCustomType: Swift.String?
  public var reverse: Swift.Bool
  public var exactMatch: Swift.Bool
  public var messageTimestampFrom: Swift.Int64
  public var messageTimestampTo: Swift.Int64
  public var order: ChatSDK.MessageSearchQueryOrder
  public var limit: Swift.UInt
  public var advancedQuery: Swift.Bool
  public var targetFields: [Swift.String]?
  @objc override dynamic public init()
  convenience public init(builder: (ChatSDK.MessageSearchQueryParams) -> Swift.Void)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension ChatSDK.MessageSearchQueryParams {
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
}
extension ChatSDK.MessageSearchQueryParams : Foundation.NSCopying {
  @objc dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@objc @_inheritsConvenienceInitializers public class FileMessageUpdateParams : ChatSDK.BaseMessageUpdateParams {
  @objc override dynamic public init()
  @objc deinit
}
public protocol MessageCollectionDelegate : AnyObject {
  func messageCollection(_ collection: ChatSDK.MessageCollection, context: ChatSDK.MessageContext, channel: ChatSDK.GroupChannel, addedMessages: [ChatSDK.BaseMessage])
  func messageCollection(_ collection: ChatSDK.MessageCollection, context: ChatSDK.MessageContext, channel: ChatSDK.GroupChannel, updatedMessages: [ChatSDK.BaseMessage])
  func messageCollection(_ collection: ChatSDK.MessageCollection, context: ChatSDK.MessageContext, channel: ChatSDK.GroupChannel, deletedMessages: [ChatSDK.BaseMessage])
  func messageCollection(_ collection: ChatSDK.MessageCollection, context: ChatSDK.MessageContext, updatedChannel: ChatSDK.GroupChannel)
  func messageCollection(_ collection: ChatSDK.MessageCollection, context: ChatSDK.MessageContext, deletedChannel channelURL: Swift.String)
  func didDetectHugeGap(_ collection: ChatSDK.MessageCollection)
}
@objc @_inheritsConvenienceInitializers public class PollVoterListQueryParams : ObjectiveC.NSObject, Swift.Encodable {
  public var pollId: Swift.Int64
  public var pollOptionId: Swift.Int64
  public var channelType: ChatSDK.ChannelType
  public var channelURL: Swift.String
  public var limit: Swift.UInt
  @objc override dynamic public init()
  convenience public init(builder: (ChatSDK.PollVoterListQueryParams) -> Swift.Void)
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
public protocol SessionDelegate : AnyObject {
  func sessionTokenDidRequire(successCompletion success: @escaping (Swift.String?) -> Swift.Void, failCompletion fail: @escaping () -> Swift.Void)
  func sessionWasClosed()
  func sessionWasRefreshed()
  func sessionDidHaveError(_ error: ChatSDK.GIMError)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GIMError : Foundation.NSError {
  public class func error(withDictionary dict: [Swift.String : Any]) -> ChatSDK.GIMError?
  public class func error(withNSError error: Foundation.NSError) -> ChatSDK.GIMError
  public class func error(code: Swift.Int, message: Swift.String) -> ChatSDK.GIMError
  @objc override dynamic public init(domain: Swift.String, code: Swift.Int, userInfo dict: [Swift.String : Any]? = nil)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class UserMessageCreateParams : ChatSDK.BaseMessageCreateParams {
  public var message: Swift.String
  public var pollId: Swift.Int64
  public var mentionedMessageTemplate: Swift.String?
  public init(message: Swift.String)
  override public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
public enum PushNotificationDeliveryOption : Swift.String, Swift.Codable {
  case `default`
  case suppress
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum GroupChannelMutedMemberFilter : Swift.String, Swift.Codable {
  case all
  case muted
  case unmuted
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum MemberState : Swift.String, Swift.Codable {
  case joined
  case invited
  case none
  case left
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum MessageTypeFilter : Swift.String, Swift.Codable {
  case all
  case user
  case file
  case admin
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum MyMemberStateFilter : Swift.String, Swift.Codable {
  case all
  case joinedOnly
  case invitedOnly
  case invitedByFriend
  case invitedByNonFriend
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class GroupChannelTotalUnreadChannelCountParams : ObjectiveC.NSObject, Swift.Encodable {
  public var customTypesFilter: [Swift.String]?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum GroupChannelListQueryType : Swift.String, Swift.Codable {
  case and
  case or
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_hasMissingDesignatedInitializers final public class OGImage : ObjectiveC.NSObject, Swift.Codable {
  final public let url: Swift.String?
  final public let secureURL: Swift.String?
  final public let type: Swift.String?
  final public let alt: Swift.String?
  final public let width: Swift.Int
  final public let height: Swift.Int
  public init(from decoder: any Swift.Decoder) throws
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
}
infix operator ?+= : AssignmentPrecedence
infix operator ?= : DefaultPrecedence
infix operator =? : DefaultPrecedence
public typealias PollListHandler = (_ polls: [ChatSDK.Poll]?, _ error: ChatSDK.GIMError?) -> Swift.Void
public typealias ProgressHandler = ((_ bytesSent: Swift.Int64, _ totalBytesSent: Swift.Int64, _ totalBytesExpectedToSend: Swift.Int64) -> Swift.Void)
public enum ScheduledStatusOptions : Swift.String {
  case pending
  case sent
  case failed
  case canceled
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class OpenChannelUpdateParams : ObjectiveC.NSObject, Foundation.NSCopying, Swift.Encodable, ChatSDK.Serializable {
  public var name: Swift.String?
  public var coverURL: Swift.String?
  public var coverImage: Foundation.Data?
  public var coverImageName: Swift.String?
  public var data: Swift.String?
  public var operatorUserIds: [Swift.String]?
  public var customType: Swift.String?
  @objc override dynamic convenience public init()
  public init(name: Swift.String? = nil, coverURL: Swift.String? = nil, coverImage: Foundation.Data? = nil, coverImageName: Swift.String? = nil, data: Swift.String? = nil, operatorUserIds: [Swift.String]? = nil, customType: Swift.String? = nil)
  public func setOperators(_ operators: [ChatSDK.User])
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class PollUpdateParams : ObjectiveC.NSObject, Swift.Codable {
  public var title: Swift.String?
  public var closeAt: Swift.Int64?
  public var allowUserSuggestion: Swift.Bool?
  public var allowMultipleVotes: Swift.Bool?
  public var allowAnonymousVotes: Swift.Bool?
  convenience public init(builder: (ChatSDK.PollUpdateParams) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public class ChannelContext : ObjectiveC.NSObject {
  public var source: ChatSDK.CollectionEventSource {
    get
  }
  public var fromEvent: Swift.Bool {
    get
  }
  public init(source: ChatSDK.CollectionEventSource)
  @objc deinit
}
@objc public class ParticipantListQuery : ObjectiveC.NSObject, ChatSDK.UserListQuery {
  public var hasNext: Swift.Bool {
    get
  }
  public var isLoading: Swift.Bool {
    get
  }
  dynamic public var limit: Swift.UInt {
    get
  }
  public init(channelUri: Swift.String, hasNext: Swift.Bool, isLoading: Swift.Bool, limit: Swift.UInt = 20)
  public func loadNextPage(completionHandler: @escaping ChatSDK.UserListHandler)
  @available(iOS 13.0, *)
  public func loadNextPage() async throws -> Swift.Result<[ChatSDK.User], ChatSDK.GIMError>
  @objc deinit
}
extension ChatSDK.ParticipantListQuery : Foundation.NSCopying {
  @objc dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
public typealias GroupChannelListHandler = (_ channels: [ChatSDK.GroupChannel]?, _ error: ChatSDK.GIMError?) -> Swift.Void
@objc @_hasMissingDesignatedInitializers public class OpenChannel : ChatSDK.BaseChannel {
  public var participantCount: Swift.Int {
    get
  }
  public var operators: [ChatSDK.User]? {
    get
  }
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
extension ChatSDK.OpenChannel {
  dynamic public class func createChannel(completionHandler: @escaping ChatSDK.OpenChannelHandler)
  @available(iOS 13.0, *)
  dynamic public class func createChannel() async throws -> Swift.Result<ChatSDK.OpenChannel, ChatSDK.GIMError>
  dynamic public class func createChannel(params: ChatSDK.OpenChannelCreateParams, completionHandler: @escaping ChatSDK.OpenChannelHandler)
  @available(iOS 13.0, *)
  dynamic public class func createChannel(params: ChatSDK.OpenChannelCreateParams) async throws -> Swift.Result<ChatSDK.OpenChannel, ChatSDK.GIMError>
  @available(iOS 13.0, *)
  dynamic public class func createChannel(params: ChatSDK.OpenChannelCreateParams, progressHandler: ChatSDK.ProgressHandler?) async throws -> Swift.Result<ChatSDK.OpenChannel, ChatSDK.GIMError>
  dynamic public class func createChannel(params: ChatSDK.OpenChannelCreateParams, progressHandler: ChatSDK.ProgressHandler?, completionHandler: ChatSDK.OpenChannelHandler?)
  dynamic public func update(params: ChatSDK.OpenChannelUpdateParams, completionHandler: @escaping ChatSDK.OpenChannelHandler)
  @available(iOS 13.0, *)
  dynamic public func update(params: ChatSDK.OpenChannelUpdateParams) async throws -> Swift.Result<ChatSDK.OpenChannel, ChatSDK.GIMError>
  dynamic public func update(params: ChatSDK.OpenChannelUpdateParams, progressHandler: ChatSDK.ProgressHandler?, completionHandler: @escaping ChatSDK.OpenChannelHandler)
  @available(iOS 13.0, *)
  dynamic public func update(params: ChatSDK.OpenChannelUpdateParams, progressHandler: ChatSDK.ProgressHandler?) async throws -> Swift.Result<ChatSDK.OpenChannel, ChatSDK.GIMError>
  dynamic public class func getChannel(url: Swift.String, completionHandler: ChatSDK.OpenChannelHandler?)
  public func getChannel(completionHandler: ChatSDK.OpenChannelHandler?)
  @available(iOS 13.0, *)
  dynamic public class func getChannel(url: Swift.String) async throws -> Swift.Result<ChatSDK.OpenChannel, ChatSDK.GIMError>
  public func getChannel() async throws -> Swift.Result<ChatSDK.OpenChannel, ChatSDK.GIMError>
  dynamic public func refresh(completionHandler: ChatSDK.GIMErrorHandler?)
  @available(iOS 13.0, *)
  dynamic public func refresh() async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
}
extension ChatSDK.OpenChannel {
  dynamic public class func createOpenChannelListQuery() -> ChatSDK.OpenChannelListQuery
  dynamic public class func createOpenChannelListQuery(paramsBuilder: (ChatSDK.OpenChannelListQueryParams) -> Swift.Void) -> ChatSDK.OpenChannelListQuery
  dynamic public class func createOpenChannelListQuery(params: ChatSDK.OpenChannelListQueryParams) -> ChatSDK.OpenChannelListQuery
}
extension ChatSDK.OpenChannel {
  dynamic public class func createParticipantListQuery(channelURL: Swift.String) -> ChatSDK.ParticipantListQuery
  dynamic public class func createParticipantListQuery(channelURL: Swift.String, paramsBuilder: (ChatSDK.ParticipantListQueryParams) -> Swift.Void) -> ChatSDK.ParticipantListQuery
  dynamic public class func createParticipantListQuery(channelURL: Swift.String, params: ChatSDK.ParticipantListQueryParams) -> ChatSDK.ParticipantListQuery
  dynamic public func createParticipantListQuery() -> ChatSDK.ParticipantListQuery?
  dynamic public func createParticipantListQuery(paramsBuilder: (ChatSDK.ParticipantListQueryParams) -> Swift.Void) -> ChatSDK.ParticipantListQuery?
  dynamic public func createParticipantListQuery(params: ChatSDK.ParticipantListQueryParams) -> ChatSDK.ParticipantListQuery?
}
extension ChatSDK.OpenChannel {
  dynamic public func enter(completionHandler: ChatSDK.GIMErrorHandler?)
  @available(iOS 13.0, *)
  dynamic public func enter() async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
  dynamic public func exit(completionHandler: ChatSDK.GIMErrorHandler?)
  @available(iOS 13.0, *)
  dynamic public func exit() async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
}
@objc @_inheritsConvenienceInitializers public class MessageRequestState : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
public typealias OpenChannelListHandler = (_ channels: [ChatSDK.OpenChannel]?, _ error: ChatSDK.GIMError?) -> Swift.Void
@objc @_inheritsConvenienceInitializers public class BaseCollection : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers final public class BlockedUserListQuery : ObjectiveC.NSObject, ChatSDK.UserListQuery {
  final public var hasNext: Swift.Bool {
    get
  }
  final public var isLoading: Swift.Bool {
    get
  }
  dynamic final public var userIdsFilter: [Swift.String]? {
    get
  }
  dynamic final public var limit: Swift.UInt {
    get
  }
  final public func loadNextPage(completionHandler: @escaping ChatSDK.UserListHandler)
  @available(iOS 13.0, *)
  final public func loadNextPage() async throws -> Swift.Result<[ChatSDK.User], ChatSDK.GIMError>
  @objc deinit
}
extension ChatSDK.BlockedUserListQuery : Foundation.NSCopying {
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
public typealias MessageChangeLogHandler = ((_ updatedMessages: [ChatSDK.BaseMessage]?, _ deletedMessageIds: [Swift.Int64]?, _ hasMore: Swift.Bool, _ token: Swift.String?, _ error: ChatSDK.GIMError?) -> Swift.Void)
public struct MessageChangeLog {
}
public protocol ConnectionDelegate : AnyObject {
  func didStartReconnection()
  func didSucceedReconnection()
  func didFailReconnection()
  func didConnect(userId: Swift.String)
  func didDisconnect(userId: Swift.String)
}
extension ChatSDK.ConnectionDelegate {
  dynamic public func didStartReconnection()
  dynamic public func didFailReconnection()
  dynamic public func didDisconnect(userId: Swift.String)
}
public typealias MuteInfoHandler = ((_ isMuted: Swift.Bool, _ description: Swift.String, _ startAt: Swift.Int64, _ endAt: Swift.Int64, _ remainingDuration: Swift.Int64, _ error: ChatSDK.GIMError?) -> Swift.Void)
public struct MuteInfo {
}
@objc public class AppleCriticalAlertOptions : ObjectiveC.NSObject, ChatSDK.Mappable {
  public var name: Swift.String
  public var volume: Swift.Float
  public init(name: Swift.String = "default", volume: Swift.Float = 1.0)
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class OperatorListQuery : ObjectiveC.NSObject, ChatSDK.UserListQuery {
  public var hasNext: Swift.Bool {
    get
  }
  public var isLoading: Swift.Bool {
    get
  }
  public func loadNextPage(completionHandler: @escaping ChatSDK.UserListHandler)
  @available(iOS 13.0, *)
  public func loadNextPage() async throws -> Swift.Result<[ChatSDK.User], ChatSDK.GIMError>
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
extension ChatSDK.OperatorListQuery {
  dynamic public var limit: Swift.UInt {
    get
  }
}
extension ChatSDK.OperatorListQuery : Foundation.NSCopying {
}
@objc @_hasMissingDesignatedInitializers public class MessageCollection : ChatSDK.BaseCollection {
  weak open var delegate: (any ChatSDK.MessageCollectionDelegate)?
  public var startingPoint: Swift.Int64 {
    get
  }
  public var hasNext: Swift.Bool {
    get
  }
  public var hasPrevious: Swift.Bool {
    get
  }
  public var succeededMessages: [ChatSDK.BaseMessage] {
    get
  }
  public var pendingMessages: [ChatSDK.BaseMessage] {
    get
  }
  public var failedMessages: [ChatSDK.BaseMessage] {
    get
  }
  public var channel: ChatSDK.GroupChannel {
    get
  }
  @objc deinit
  public func startCollection(initPolicy: ChatSDK.MessageCollectionInitPolicy, cacheResultHandler: ChatSDK.MessageListHandler?, apiResultHandler: ChatSDK.MessageListHandler?)
  public func dispose()
  public func loadNext(completionHandler: @escaping ChatSDK.MessageListHandler)
  @available(iOS 13.0, *)
  public func loadNext() async throws -> Swift.Result<[ChatSDK.BaseMessage], ChatSDK.GIMError>
  public func loadPrevious(completionHandler: @escaping ChatSDK.MessageListHandler)
  @available(iOS 13.0, *)
  public func loadPrevious() async throws -> Swift.Result<[ChatSDK.BaseMessage], ChatSDK.GIMError>
  public func removeFailed(messages: [ChatSDK.BaseMessage], completionHandler: ChatSDK.MessageRequestIdsHandler?)
  @available(iOS 13.0, *)
  public func removeFailed(messages: [ChatSDK.BaseMessage]) async throws -> Swift.Result<[Swift.String], ChatSDK.GIMError>
  public func removeAllFailed(completionHandler: ChatSDK.GIMErrorHandler?)
  @available(iOS 13.0, *)
  public func removeAllFailed() async throws -> Swift.Result<Swift.Void, ChatSDK.GIMError>
}
extension ChatSDK.MessageCollection : ChatSDK.GroupChannelDelegate {
  dynamic public func channel(_ channel: ChatSDK.BaseChannel, didReceive message: ChatSDK.BaseMessage)
  dynamic public func channel(_ channel: ChatSDK.BaseChannel, didUpdate message: ChatSDK.BaseMessage)
  public func channel(_ channel: ChatSDK.BaseChannel, didPending message: ChatSDK.BaseMessage)
  public func channel(_ channel: ChatSDK.BaseChannel, didFailure message: ChatSDK.BaseMessage)
  dynamic public func channel(_ channel: ChatSDK.BaseChannel, messageWasDeleted messageId: Swift.Int64)
  dynamic public func channel(_ channel: ChatSDK.BaseChannel, updatedReaction reactionEvent: ChatSDK.ReactionEvent)
  dynamic public func channel(_ channel: ChatSDK.BaseChannel, didUpdateThreadInfo threadInfoUpdateEvent: ChatSDK.ThreadInfoUpdateEvent)
  dynamic public func channelWasChanged(_ channel: ChatSDK.BaseChannel)
  dynamic public func channelWasDeleted(_ channelURL: Swift.String, channelType: ChatSDK.ChannelType)
  dynamic public func channel(_ channel: ChatSDK.BaseChannel, didReceiveMention message: ChatSDK.BaseMessage)
  public func channelWasFrozen(_ channel: ChatSDK.BaseChannel)
  public func channelWasUnfrozen(_ channel: ChatSDK.BaseChannel)
  public func channel(_ channel: ChatSDK.BaseChannel, userWasMuted user: ChatSDK.RestrictedUser)
  public func channel(_ channel: ChatSDK.BaseChannel, userWasUnmuted user: ChatSDK.User)
  public func channel(_ channel: ChatSDK.BaseChannel, userWasBanned user: ChatSDK.RestrictedUser)
  dynamic public func channel(_ channel: ChatSDK.BaseChannel, createdMetaData: [Swift.String : Swift.String]?)
  dynamic public func channel(_ channel: ChatSDK.BaseChannel, updatedMetaData: [Swift.String : Swift.String]?)
  dynamic public func channel(_ channel: ChatSDK.BaseChannel, deletedMetaDataKeys: [Swift.String]?)
  public func channelDidUpdateOperators(_ channel: ChatSDK.BaseChannel)
  public func channelDidUpdatePinnedMessages(_ channel: ChatSDK.BaseChannel)
  public func channel(_ channel: ChatSDK.GroupChannel, userDidJoin user: ChatSDK.User)
  public func channel(_ channel: ChatSDK.GroupChannel, userDidLeave user: ChatSDK.User)
  public func channelDidUpdateReadStatus(_ channel: ChatSDK.GroupChannel)
  public func channelDidUpdateDeliveryStatus(_ channel: ChatSDK.GroupChannel)
  public func channelDidUpdateTypingStatus(_ channel: ChatSDK.GroupChannel)
  public func channel(_ channel: ChatSDK.GroupChannel, didUpdatePoll event: ChatSDK.PollUpdateEvent)
}
extension ChatSDK.MessageCollection : ChatSDK.ConnectionDelegate {
  dynamic public func didSucceedReconnection()
  dynamic public func didConnect(userId: Swift.String)
}
extension ChatSDK.MessageCollection : ChatSDK.GIMUserEventDelegate {
  public func didUpdateUsers(_ users: [ChatSDK.User])
}
@objc @_hasMissingDesignatedInitializers final public class MutedUserListQuery : ObjectiveC.NSObject, ChatSDK.RestrictedUserListQuery {
  final public var hasNext: Swift.Bool {
    get
  }
  final public var isLoading: Swift.Bool {
    get
  }
  final public func loadNextPage(completionHandler: @escaping ChatSDK.RestrictedUserListHandler)
  @available(iOS 13.0, *)
  final public func loadNextPage() async throws -> Swift.Result<[ChatSDK.RestrictedUser], ChatSDK.GIMError>
  final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
extension ChatSDK.MutedUserListQuery {
  dynamic final public var limit: Swift.UInt {
    get
  }
}
public enum GroupChannelHiddenState : Swift.String, Swift.Codable {
  case unhidden
  case hiddenAllowAutoUnhide
  case hiddenPreventAutoUnhide
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_hasMissingDesignatedInitializers public class ReactionEvent : ObjectiveC.NSObject, ChatSDK.Mappable, Swift.Codable {
  public var messageId: Swift.Int64 {
    get
  }
  final public let key: Swift.String
  final public let userId: Swift.String
  final public let operation: ChatSDK.ReactionEventAction
  final public let updatedAt: Swift.Int64
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum LogLevel : Swift.Int, Swift.Comparable, Swift.Codable {
  case verbose
  case debug
  case info
  case warning
  case error
  case fault
  case none
  public static func < (lhs: ChatSDK.LogLevel, rhs: ChatSDK.LogLevel) -> Swift.Bool
  public static func == (lhs: ChatSDK.LogLevel, rhs: ChatSDK.LogLevel) -> Swift.Bool
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol GroupChannelCollectionDelegate : AnyObject {
  func channelCollection(_ collection: ChatSDK.GroupChannelCollection, context: ChatSDK.ChannelContext, addedChannels: [ChatSDK.GroupChannel])
  func channelCollection(_ collection: ChatSDK.GroupChannelCollection, context: ChatSDK.ChannelContext, updatedChannels: [ChatSDK.GroupChannel])
  func channelCollection(_ collection: ChatSDK.GroupChannelCollection, context: ChatSDK.ChannelContext, deletedChannelURLs: [Swift.String])
}
@objc @_hasMissingDesignatedInitializers public class ReadStatus : ObjectiveC.NSObject, Swift.Codable {
  public var reader: ChatSDK.User?
  public var timestamp: Swift.Int64
  public var channelURL: Swift.String?
  public var channelType: Swift.String?
  public var reqId: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public typealias VoterListHandler = (_ voters: [ChatSDK.User]?, _ error: ChatSDK.GIMError?) -> Swift.Void
public typealias UserMessageHandler = ((_ message: ChatSDK.UserMessage?, _ error: ChatSDK.GIMError?) -> Swift.Void)
public enum GroupChannelPushTriggerOption : Swift.String, Swift.Codable {
  case `default`
  case all
  case off
  case mentionOnly
  public init(from decoder: any Swift.Decoder) throws
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public typealias UserListHandler = (_ users: [ChatSDK.User]?, _ error: ChatSDK.GIMError?) -> Swift.Void
public typealias MessageListHandler = ((_ messages: [ChatSDK.BaseMessage]?, _ error: ChatSDK.GIMError?) -> Swift.Void)
public typealias OpenChannelHandler = ((_ channel: ChatSDK.OpenChannel?, _ error: ChatSDK.GIMError?) -> Swift.Void)
public protocol GIMErrorCode : Foundation.LocalizedError {
  var message: Swift.String { get }
  var code: Swift.Int { get }
  func asGIMError(message: Swift.String?) -> ChatSDK.GIMError
  init?(rawValue: Swift.Int)
}
extension ChatSDK.GIMErrorCode {
  public var errorDescription: Swift.String? {
    get
  }
  public var asGIMError: ChatSDK.GIMError {
    get
  }
  public func asGIMError(message: Swift.String?) -> ChatSDK.GIMError
}
public typealias FileMessageHandler = ((_ message: ChatSDK.FileMessage?, _ error: ChatSDK.GIMError?) -> Swift.Void)
@objc @_hasMissingDesignatedInitializers public class ApplicationUserListQuery : ObjectiveC.NSObject, ChatSDK.UserListQuery {
  public var hasNext: Swift.Bool {
    get
  }
  public var isLoading: Swift.Bool {
    get
  }
  dynamic public var limit: Swift.UInt {
    get
  }
  dynamic public var userIdsFilter: [Swift.String]? {
    get
  }
  dynamic public var metaDataKeyFilter: Swift.String? {
    get
  }
  dynamic public var metaDataValuesFilter: [Swift.String]? {
    get
  }
  dynamic public var nicknameStartsWithFilter: Swift.String? {
    get
  }
  public func loadNextPage(completionHandler: @escaping ChatSDK.UserListHandler)
  @available(iOS 13.0, *)
  public func loadNextPage() async throws -> Swift.Result<[ChatSDK.User], ChatSDK.GIMError>
  @objc deinit
}
public enum ReactionEventAction : Swift.String, Swift.Codable {
  case add
  case delete
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum CollectionEventSource : Swift.Int, Swift.Codable {
  case messageChangelog
  case messageFill
  case channelChangelog
  case localMessagePendingCreated
  case localMessageFailed
  case localMessageCanceled
  case messagePending
  case messageFailure
  case localMessageResendStarted
  case eventMessageSent
  case eventMessageReceived
  case eventMessageUpdated
  case eventMessageDeleted
  case eventReactionUpdated
  case eventThreadInfoUpdated
  case eventMention
  case eventChannelChanged
  case eventChannelMemberCountChanged
  case eventChannelFrozen
  case eventChannelUnfrozen
  case eventChannelHidden
  case eventChannelDeleted
  case eventOperatorUpdated
  case eventTypingStatusUpdated
  case eventDeliveryStatusUpdated
  case eventReadStatusUpdated
  case eventUserUpdate
  case eventUserReceivedInvitation
  case eventUserDeclinedInvitation
  case eventUserJoined
  case eventUserMuted
  case eventUserUnmuted
  case eventUserLeft
  case eventUserBanned
  case eventUserUnbanned
  case eventMetaDataCreated
  case eventMetaDataUpdated
  case eventMetaDataDeleted
  case eventMetaCounterCreated
  case eventMetaCounterUpdated
  case eventMetaCounterDeleted
  case eventPollUpdated
  case eventPollVoted
  case eventPollChangeLog
  case eventPinnedMessageUpdated
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol OpenChannelDelegate : ChatSDK.BaseChannelDelegate {
  func channelDidChangeParticipantCount(_ channels: [ChatSDK.OpenChannel])
  func channel(_ channel: ChatSDK.OpenChannel, userDidEnter user: ChatSDK.User)
  func channel(_ channel: ChatSDK.OpenChannel, userDidExit user: ChatSDK.User)
}
extension ChatSDK.OpenChannelDelegate {
  public func channelDidChangeParticipantCount(_ channels: [ChatSDK.OpenChannel])
  public func channel(_ channel: ChatSDK.OpenChannel, userDidEnter user: ChatSDK.User)
  public func channel(_ channel: ChatSDK.OpenChannel, userDidExit user: ChatSDK.User)
  public func channelDidUpdateReadStatus(_ channel: ChatSDK.OpenChannel)
  public func channelDidUpdateDeliveryStatus(_ channel: ChatSDK.OpenChannel)
  public func channelDidUpdateTypingStatus(_ channel: ChatSDK.OpenChannel)
  public func channelDidChangeMemberCount(_ channels: [ChatSDK.OpenChannel])
  public func channel(_ channel: ChatSDK.OpenChannel, didReceiveInvitation invitees: [ChatSDK.User]?, inviter: ChatSDK.User?)
  public func channel(_ channel: ChatSDK.OpenChannel, didDeclineInvitation invitee: ChatSDK.User, inviter: ChatSDK.User?)
  public func channel(_ channel: ChatSDK.OpenChannel, userDidJoin user: ChatSDK.User)
  public func channel(_ channel: ChatSDK.OpenChannel, userDidLeave user: ChatSDK.User)
  public func channelWasHidden(_ channel: ChatSDK.OpenChannel)
  public func channel(_ channel: ChatSDK.OpenChannel, didUpdatePoll event: ChatSDK.PollUpdateEvent)
}
@objc @_hasMissingDesignatedInitializers public class UpdatedPoll : ObjectiveC.NSObject, Swift.Codable {
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class ScheduledUserMessageUpdateParams : ChatSDK.ScheduledBaseMessageUpdateParams {
  final public var message: Swift.String?
  final public var translationTargetLanguages: [Swift.String]?
  @objc override dynamic public init()
  override final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class PollOption : ObjectiveC.NSObject, Swift.Codable {
  final public let pollId: Swift.Int64
  final public let pollOptionId: Swift.Int64
  final public let text: Swift.String
  final public let createdBy: Swift.String
  final public let createdAt: Swift.Int64
  public var voteCount: Swift.Int64 {
    get
  }
  public var voters: [ChatSDK.User]
  final public let updatedAt: Swift.Int64
  required public init(from decoder: any Swift.Decoder) throws
  public class func getPollOption(params: ChatSDK.PollOptionRetrievalParams, completionHandler: @escaping ChatSDK.PollOptionHandler)
  @available(iOS 13.0, *)
  public class func getPollOption(params: ChatSDK.PollOptionRetrievalParams) async throws -> Swift.Result<ChatSDK.PollOption, ChatSDK.GIMError>
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
extension ChatSDK.PollOption {
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
}
public typealias PollHandler = (_ poll: ChatSDK.Poll?, _ error: ChatSDK.GIMError?) -> Swift.Void
public enum MentionType : Swift.String, Swift.Codable {
  case users
  case channel
  public init(from decoder: any Swift.Decoder) throws
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers final public class MemberListQueryParams : ObjectiveC.NSObject {
  final public var nicknameStartsWithFilter: Swift.String?
  final public var operatorFilter: ChatSDK.GroupChannelOperatorFilter
  final public var mutedMemberFilter: ChatSDK.GroupChannelMutedMemberFilter
  final public var memberStateFilter: ChatSDK.MemberStateFilter
  final public var order: ChatSDK.MemberListOrder
  final public var limit: Swift.UInt
  @objc override dynamic public init()
  convenience public init(builder: (ChatSDK.MemberListQueryParams) -> Swift.Void)
  @objc deinit
}
extension ChatSDK.MemberListQueryParams {
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
}
extension ChatSDK.MemberListQueryParams : Foundation.NSCopying {
  @objc final public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
public enum GIMWebSocketConnectionState : Swift.Int {
  case connecting
  case open
  case closed
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum RestrictionType : Swift.String, Swift.Codable, Swift.CaseIterable {
  case muted
  case banned
  public init(rawValue: Swift.String)
  public typealias AllCases = [ChatSDK.RestrictionType]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [ChatSDK.RestrictionType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension ChatSDK.RestrictionType : Swift.Equatable {
}
extension ChatSDK.RestrictionType : Swift.Hashable {
}
public enum PushTemplate : Swift.String, Swift.Codable {
  case `default`
  case alternative
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum MutedState : Swift.Int, Swift.Codable {
  case unmuted
  case muted
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum ReplyType : Swift.String, Swift.Codable {
  case none
  case all
  case onlyReplyToChannel
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public typealias DistinctGroupChannelHandler = ((_ channel: ChatSDK.GroupChannel?, _ isCreated: Swift.Bool, _ error: ChatSDK.GIMError?) -> Swift.Void)
public enum MessageSendingStatus : Swift.String, Swift.Codable {
  case none
  case pending
  case failed
  case succeeded
  case canceled
  case scheduled
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_hasMissingDesignatedInitializers public class ScheduledInfo : ObjectiveC.NSObject, Swift.Codable {
  final public let scheduledMessageId: Swift.Int64
  final public let scheduledAt: Swift.Int64
  public var scheduledMessageParams: ChatSDK.ScheduledBaseMessageCreateParams?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class ScheduledBaseMessageUpdateParams : ObjectiveC.NSObject, Swift.Codable {
  public var scheduledAt: Swift.Int64
  public var data: Swift.String?
  public var customType: Swift.String?
  public var pushNotificationDeliveryOption: ChatSDK.PushNotificationDeliveryOption
  public var metaArrays: [ChatSDK.MessageMetaArray]?
  public var mentionType: ChatSDK.MentionType
  public var mentionedUserIds: [Swift.String]?
  public func setMentionedUsers(_ mentionedUsers: [ChatSDK.User])
  public func addMentionedUserIds(_ userIds: [Swift.String])
  @objc override dynamic public init()
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
public enum MemberListOrder : Swift.String, Swift.Codable {
  case nicknameAlphabetical
  case operatorThenMemberNicknameAlphabetical
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension ChatSDK.ReportCategory : Swift.Equatable {}
extension ChatSDK.ReportCategory : Swift.Hashable {}
extension ChatSDK.ReportCategory : Swift.RawRepresentable {}
extension ChatSDK.UserConnectionStatus : Swift.Equatable {}
extension ChatSDK.UserConnectionStatus : Swift.Hashable {}
extension ChatSDK.UserConnectionStatus : Swift.RawRepresentable {}
extension ChatSDK.CountPreference : Swift.Equatable {}
extension ChatSDK.CountPreference : Swift.Hashable {}
extension ChatSDK.CountPreference : Swift.RawRepresentable {}
extension ChatSDK.PollStatus : Swift.Equatable {}
extension ChatSDK.PollStatus : Swift.Hashable {}
extension ChatSDK.PollStatus : Swift.RawRepresentable {}
extension ChatSDK.ChannelHiddenStateFilter : Swift.Equatable {}
extension ChatSDK.ChannelHiddenStateFilter : Swift.Hashable {}
extension ChatSDK.ChannelHiddenStateFilter : Swift.RawRepresentable {}
extension ChatSDK.Role : Swift.Equatable {}
extension ChatSDK.Role : Swift.Hashable {}
extension ChatSDK.Role : Swift.RawRepresentable {}
extension ChatSDK.MessageSearchQueryOrder : Swift.Equatable {}
extension ChatSDK.MessageSearchQueryOrder : Swift.Hashable {}
extension ChatSDK.MessageSearchQueryOrder : Swift.RawRepresentable {}
extension ChatSDK.ChatError : Swift.Equatable {}
extension ChatSDK.ChatError : Swift.Hashable {}
extension ChatSDK.ChatError : Swift.RawRepresentable {}
extension ChatSDK.PublicGroupChannelMembershipFilter : Swift.Equatable {}
extension ChatSDK.PublicGroupChannelMembershipFilter : Swift.Hashable {}
extension ChatSDK.PublicGroupChannelMembershipFilter : Swift.RawRepresentable {}
extension ChatSDK.ScheduledMessageListOrder : Swift.Equatable {}
extension ChatSDK.ScheduledMessageListOrder : Swift.Hashable {}
extension ChatSDK.ScheduledMessageListOrder : Swift.RawRepresentable {}
extension ChatSDK.PushTokenRegistrationStatus : Swift.Equatable {}
extension ChatSDK.PushTokenRegistrationStatus : Swift.Hashable {}
extension ChatSDK.PushTokenRegistrationStatus : Swift.RawRepresentable {}
extension ChatSDK.MessageCollectionInitPolicy : Swift.Equatable {}
extension ChatSDK.MessageCollectionInitPolicy : Swift.Hashable {}
extension ChatSDK.MessageCollectionInitPolicy : Swift.RawRepresentable {}
extension ChatSDK.ChannelType : Swift.Equatable {}
extension ChatSDK.ChannelType : Swift.Hashable {}
extension ChatSDK.ChannelType : Swift.RawRepresentable {}
extension ChatSDK.MemberStateFilter : Swift.Equatable {}
extension ChatSDK.MemberStateFilter : Swift.Hashable {}
extension ChatSDK.MemberStateFilter : Swift.RawRepresentable {}
extension ChatSDK.PushTokenType : Swift.Equatable {}
extension ChatSDK.PushTokenType : Swift.Hashable {}
extension ChatSDK.PushTokenType : Swift.RawRepresentable {}
extension ChatSDK.GroupChannelPublicChannelFilter : Swift.Equatable {}
extension ChatSDK.GroupChannelPublicChannelFilter : Swift.Hashable {}
extension ChatSDK.GroupChannelPublicChannelFilter : Swift.RawRepresentable {}
extension ChatSDK.UserListQueryType : Swift.Equatable {}
extension ChatSDK.UserListQueryType : Swift.Hashable {}
extension ChatSDK.UserListQueryType : Swift.RawRepresentable {}
extension ChatSDK.UnreadChannelFilter : Swift.Equatable {}
extension ChatSDK.UnreadChannelFilter : Swift.Hashable {}
extension ChatSDK.UnreadChannelFilter : Swift.RawRepresentable {}
extension ChatSDK.GroupChannelListOrder : Swift.Equatable {}
extension ChatSDK.GroupChannelListOrder : Swift.Hashable {}
extension ChatSDK.GroupChannelListOrder : Swift.RawRepresentable {}
extension ChatSDK.GroupChannelListQuerySearchField : Swift.Equatable {}
extension ChatSDK.GroupChannelListQuerySearchField : Swift.Hashable {}
extension ChatSDK.PushTriggerOption : Swift.Equatable {}
extension ChatSDK.PushTriggerOption : Swift.Hashable {}
extension ChatSDK.PushTriggerOption : Swift.RawRepresentable {}
extension ChatSDK.CoreError : Swift.Equatable {}
extension ChatSDK.CoreError : Swift.Hashable {}
extension ChatSDK.CoreError : Swift.RawRepresentable {}
extension ChatSDK.GroupChannelOperatorFilter : Swift.Equatable {}
extension ChatSDK.GroupChannelOperatorFilter : Swift.Hashable {}
extension ChatSDK.GroupChannelOperatorFilter : Swift.RawRepresentable {}
extension ChatSDK.PushNotificationDeliveryOption : Swift.Equatable {}
extension ChatSDK.PushNotificationDeliveryOption : Swift.Hashable {}
extension ChatSDK.PushNotificationDeliveryOption : Swift.RawRepresentable {}
extension ChatSDK.GroupChannelMutedMemberFilter : Swift.Equatable {}
extension ChatSDK.GroupChannelMutedMemberFilter : Swift.Hashable {}
extension ChatSDK.GroupChannelMutedMemberFilter : Swift.RawRepresentable {}
extension ChatSDK.MemberState : Swift.Equatable {}
extension ChatSDK.MemberState : Swift.Hashable {}
extension ChatSDK.MemberState : Swift.RawRepresentable {}
extension ChatSDK.MessageTypeFilter : Swift.Equatable {}
extension ChatSDK.MessageTypeFilter : Swift.Hashable {}
extension ChatSDK.MessageTypeFilter : Swift.RawRepresentable {}
extension ChatSDK.MyMemberStateFilter : Swift.Equatable {}
extension ChatSDK.MyMemberStateFilter : Swift.Hashable {}
extension ChatSDK.MyMemberStateFilter : Swift.RawRepresentable {}
extension ChatSDK.GroupChannelListQueryType : Swift.Equatable {}
extension ChatSDK.GroupChannelListQueryType : Swift.Hashable {}
extension ChatSDK.GroupChannelListQueryType : Swift.RawRepresentable {}
extension ChatSDK.ScheduledStatusOptions : Swift.Equatable {}
extension ChatSDK.ScheduledStatusOptions : Swift.Hashable {}
extension ChatSDK.ScheduledStatusOptions : Swift.RawRepresentable {}
extension ChatSDK.GroupChannelHiddenState : Swift.Equatable {}
extension ChatSDK.GroupChannelHiddenState : Swift.Hashable {}
extension ChatSDK.GroupChannelHiddenState : Swift.RawRepresentable {}
extension ChatSDK.LogLevel : Swift.Hashable {}
extension ChatSDK.LogLevel : Swift.RawRepresentable {}
extension ChatSDK.GroupChannelPushTriggerOption : Swift.Equatable {}
extension ChatSDK.GroupChannelPushTriggerOption : Swift.Hashable {}
extension ChatSDK.GroupChannelPushTriggerOption : Swift.RawRepresentable {}
extension ChatSDK.ReactionEventAction : Swift.Equatable {}
extension ChatSDK.ReactionEventAction : Swift.Hashable {}
extension ChatSDK.ReactionEventAction : Swift.RawRepresentable {}
extension ChatSDK.CollectionEventSource : Swift.Equatable {}
extension ChatSDK.CollectionEventSource : Swift.Hashable {}
extension ChatSDK.CollectionEventSource : Swift.RawRepresentable {}
extension ChatSDK.MentionType : Swift.Equatable {}
extension ChatSDK.MentionType : Swift.Hashable {}
extension ChatSDK.MentionType : Swift.RawRepresentable {}
extension ChatSDK.GIMWebSocketConnectionState : Swift.Equatable {}
extension ChatSDK.GIMWebSocketConnectionState : Swift.Hashable {}
extension ChatSDK.GIMWebSocketConnectionState : Swift.RawRepresentable {}
extension ChatSDK.RestrictionType : Swift.RawRepresentable {}
extension ChatSDK.PushTemplate : Swift.Equatable {}
extension ChatSDK.PushTemplate : Swift.Hashable {}
extension ChatSDK.PushTemplate : Swift.RawRepresentable {}
extension ChatSDK.MutedState : Swift.Equatable {}
extension ChatSDK.MutedState : Swift.Hashable {}
extension ChatSDK.MutedState : Swift.RawRepresentable {}
extension ChatSDK.ReplyType : Swift.Equatable {}
extension ChatSDK.ReplyType : Swift.Hashable {}
extension ChatSDK.ReplyType : Swift.RawRepresentable {}
extension ChatSDK.MessageSendingStatus : Swift.Equatable {}
extension ChatSDK.MessageSendingStatus : Swift.Hashable {}
extension ChatSDK.MessageSendingStatus : Swift.RawRepresentable {}
extension ChatSDK.MemberListOrder : Swift.Equatable {}
extension ChatSDK.MemberListOrder : Swift.Hashable {}
extension ChatSDK.MemberListOrder : Swift.RawRepresentable {}
